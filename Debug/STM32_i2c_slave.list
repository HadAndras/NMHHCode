
STM32_i2c_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003338  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003444  08003444  00004444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003470  08003470  0000501c  2**0
                  CONTENTS
  4 .ARM          00000000  08003470  08003470  0000501c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003470  08003470  0000501c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003470  08003470  00004470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003474  08003474  00004474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08003478  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  2000001c  08003494  0000501c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08003494  0000509c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000501c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006f4d  00000000  00000000  00005045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016e5  00000000  00000000  0000bf92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000768  00000000  00000000  0000d678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005a9  00000000  00000000  0000dde0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001610d  00000000  00000000  0000e389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009c85  00000000  00000000  00024496  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e70b  00000000  00000000  0002e11b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ac826  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d40  00000000  00000000  000ac86c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000ae5ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800342c 	.word	0x0800342c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	0800342c 	.word	0x0800342c

0800014c <HAL_I2C_ListenCpltCallback>:
uint8_t startPosition;

int prc = 1;

extern void HAL_I2C_ListenCpltCallback (I2C_HandleTypeDef *hi2c)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c);
 8000154:	6878      	ldr	r0, [r7, #4]
 8000156:	f001 f873 	bl	8001240 <HAL_I2C_EnableListen_IT>
}
 800015a:	bf00      	nop
 800015c:	3708      	adds	r7, #8
 800015e:	46bd      	mov	sp, r7
 8000160:	bd80      	pop	{r7, pc}
	...

08000164 <HAL_I2C_AddrCallback>:

extern void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8000164:	b580      	push	{r7, lr}
 8000166:	b082      	sub	sp, #8
 8000168:	af00      	add	r7, sp, #0
 800016a:	6078      	str	r0, [r7, #4]
 800016c:	460b      	mov	r3, r1
 800016e:	70fb      	strb	r3, [r7, #3]
 8000170:	4613      	mov	r3, r2
 8000172:	803b      	strh	r3, [r7, #0]

	if(TransferDirection == I2C_DIRECTION_TRANSMIT)  // if the master wants to transmit the data
 8000174:	78fb      	ldrb	r3, [r7, #3]
 8000176:	2b01      	cmp	r3, #1
 8000178:	d10d      	bne.n	8000196 <HAL_I2C_AddrCallback+0x32>
	{
		rxcount = 0;
 800017a:	4b0f      	ldr	r3, [pc, #60]	@ (80001b8 <HAL_I2C_AddrCallback+0x54>)
 800017c:	2200      	movs	r2, #0
 800017e:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Slave_Sequential_Receive_IT(hi2c, RxData+rxcount, 1, I2C_FIRST_FRAME);
 8000180:	4b0d      	ldr	r3, [pc, #52]	@ (80001b8 <HAL_I2C_AddrCallback+0x54>)
 8000182:	781b      	ldrb	r3, [r3, #0]
 8000184:	461a      	mov	r2, r3
 8000186:	4b0d      	ldr	r3, [pc, #52]	@ (80001bc <HAL_I2C_AddrCallback+0x58>)
 8000188:	18d1      	adds	r1, r2, r3
 800018a:	2301      	movs	r3, #1
 800018c:	2201      	movs	r2, #1
 800018e:	6878      	ldr	r0, [r7, #4]
 8000190:	f000 ffe4 	bl	800115c <HAL_I2C_Slave_Seq_Receive_IT>
	{
		txcount = 0;
		HAL_I2C_Slave_Seq_Transmit_IT(hi2c, TxData+txcount, 1, I2C_FIRST_FRAME);

	}
}
 8000194:	e00c      	b.n	80001b0 <HAL_I2C_AddrCallback+0x4c>
		txcount = 0;
 8000196:	4b0a      	ldr	r3, [pc, #40]	@ (80001c0 <HAL_I2C_AddrCallback+0x5c>)
 8000198:	2200      	movs	r2, #0
 800019a:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Slave_Seq_Transmit_IT(hi2c, TxData+txcount, 1, I2C_FIRST_FRAME);
 800019c:	4b08      	ldr	r3, [pc, #32]	@ (80001c0 <HAL_I2C_AddrCallback+0x5c>)
 800019e:	781b      	ldrb	r3, [r3, #0]
 80001a0:	461a      	mov	r2, r3
 80001a2:	4b08      	ldr	r3, [pc, #32]	@ (80001c4 <HAL_I2C_AddrCallback+0x60>)
 80001a4:	18d1      	adds	r1, r2, r3
 80001a6:	2301      	movs	r3, #1
 80001a8:	2201      	movs	r2, #1
 80001aa:	6878      	ldr	r0, [r7, #4]
 80001ac:	f000 ff64 	bl	8001078 <HAL_I2C_Slave_Seq_Transmit_IT>
}
 80001b0:	bf00      	nop
 80001b2:	3708      	adds	r7, #8
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bd80      	pop	{r7, pc}
 80001b8:	20000040 	.word	0x20000040
 80001bc:	20000038 	.word	0x20000038
 80001c0:	20000041 	.word	0x20000041
 80001c4:	20000000 	.word	0x20000000

080001c8 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	rxcount++;
 80001d0:	4b16      	ldr	r3, [pc, #88]	@ (800022c <HAL_I2C_SlaveRxCpltCallback+0x64>)
 80001d2:	781b      	ldrb	r3, [r3, #0]
 80001d4:	3301      	adds	r3, #1
 80001d6:	b2da      	uxtb	r2, r3
 80001d8:	4b14      	ldr	r3, [pc, #80]	@ (800022c <HAL_I2C_SlaveRxCpltCallback+0x64>)
 80001da:	701a      	strb	r2, [r3, #0]
	if (rxcount < RxSIZE)
 80001dc:	4b13      	ldr	r3, [pc, #76]	@ (800022c <HAL_I2C_SlaveRxCpltCallback+0x64>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	2b07      	cmp	r3, #7
 80001e2:	d818      	bhi.n	8000216 <HAL_I2C_SlaveRxCpltCallback+0x4e>
	{
		if (rxcount == RxSIZE-1)
 80001e4:	4b11      	ldr	r3, [pc, #68]	@ (800022c <HAL_I2C_SlaveRxCpltCallback+0x64>)
 80001e6:	781b      	ldrb	r3, [r3, #0]
 80001e8:	2b07      	cmp	r3, #7
 80001ea:	d10a      	bne.n	8000202 <HAL_I2C_SlaveRxCpltCallback+0x3a>
		{
			HAL_I2C_Slave_Sequential_Receive_IT(hi2c, RxData+rxcount, 1, I2C_LAST_FRAME);
 80001ec:	4b0f      	ldr	r3, [pc, #60]	@ (800022c <HAL_I2C_SlaveRxCpltCallback+0x64>)
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	461a      	mov	r2, r3
 80001f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000230 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80001f4:	18d1      	adds	r1, r2, r3
 80001f6:	2320      	movs	r3, #32
 80001f8:	2201      	movs	r2, #1
 80001fa:	6878      	ldr	r0, [r7, #4]
 80001fc:	f000 ffae 	bl	800115c <HAL_I2C_Slave_Seq_Receive_IT>
 8000200:	e009      	b.n	8000216 <HAL_I2C_SlaveRxCpltCallback+0x4e>
		}
		else
		{
			HAL_I2C_Slave_Sequential_Receive_IT(hi2c, RxData+rxcount, 1, I2C_NEXT_FRAME);
 8000202:	4b0a      	ldr	r3, [pc, #40]	@ (800022c <HAL_I2C_SlaveRxCpltCallback+0x64>)
 8000204:	781b      	ldrb	r3, [r3, #0]
 8000206:	461a      	mov	r2, r3
 8000208:	4b09      	ldr	r3, [pc, #36]	@ (8000230 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 800020a:	18d1      	adds	r1, r2, r3
 800020c:	2304      	movs	r3, #4
 800020e:	2201      	movs	r2, #1
 8000210:	6878      	ldr	r0, [r7, #4]
 8000212:	f000 ffa3 	bl	800115c <HAL_I2C_Slave_Seq_Receive_IT>
		}
	}

	if (rxcount == RxSIZE)
 8000216:	4b05      	ldr	r3, [pc, #20]	@ (800022c <HAL_I2C_SlaveRxCpltCallback+0x64>)
 8000218:	781b      	ldrb	r3, [r3, #0]
 800021a:	2b08      	cmp	r3, #8
 800021c:	d101      	bne.n	8000222 <HAL_I2C_SlaveRxCpltCallback+0x5a>
	{
		process_data();
 800021e:	f000 f84d 	bl	80002bc <process_data>
	}
}
 8000222:	bf00      	nop
 8000224:	3708      	adds	r7, #8
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	20000040 	.word	0x20000040
 8000230:	20000038 	.word	0x20000038

08000234 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
	txcount++;
 800023c:	4b09      	ldr	r3, [pc, #36]	@ (8000264 <HAL_I2C_SlaveTxCpltCallback+0x30>)
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	3301      	adds	r3, #1
 8000242:	b2da      	uxtb	r2, r3
 8000244:	4b07      	ldr	r3, [pc, #28]	@ (8000264 <HAL_I2C_SlaveTxCpltCallback+0x30>)
 8000246:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Slave_Seq_Transmit_IT(hi2c, TxData+txcount, 1, I2C_NEXT_FRAME);
 8000248:	4b06      	ldr	r3, [pc, #24]	@ (8000264 <HAL_I2C_SlaveTxCpltCallback+0x30>)
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	461a      	mov	r2, r3
 800024e:	4b06      	ldr	r3, [pc, #24]	@ (8000268 <HAL_I2C_SlaveTxCpltCallback+0x34>)
 8000250:	18d1      	adds	r1, r2, r3
 8000252:	2304      	movs	r3, #4
 8000254:	2201      	movs	r2, #1
 8000256:	6878      	ldr	r0, [r7, #4]
 8000258:	f000 ff0e 	bl	8001078 <HAL_I2C_Slave_Seq_Transmit_IT>
}
 800025c:	bf00      	nop
 800025e:	3708      	adds	r7, #8
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	20000041 	.word	0x20000041
 8000268:	20000000 	.word	0x20000000

0800026c <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
	uint32_t errorcode = HAL_I2C_GetError(hi2c);
 8000274:	6878      	ldr	r0, [r7, #4]
 8000276:	f001 fa3f 	bl	80016f8 <HAL_I2C_GetError>
 800027a:	60f8      	str	r0, [r7, #12]
	if (errorcode == 4)  // AF error
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	2b04      	cmp	r3, #4
 8000280:	d112      	bne.n	80002a8 <HAL_I2C_ErrorCallback+0x3c>
	{
		if (txcount == 0)  // error is while slave is receiving
 8000282:	4b0b      	ldr	r3, [pc, #44]	@ (80002b0 <HAL_I2C_ErrorCallback+0x44>)
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d105      	bne.n	8000296 <HAL_I2C_ErrorCallback+0x2a>
		{
			//bytesRrecvd = rxcount-1;  // the first byte is the register address
			rxcount = 0;  // Reset the rxcount for the next operation
 800028a:	4b0a      	ldr	r3, [pc, #40]	@ (80002b4 <HAL_I2C_ErrorCallback+0x48>)
 800028c:	2200      	movs	r2, #0
 800028e:	701a      	strb	r2, [r3, #0]
			process_data();
 8000290:	f000 f814 	bl	80002bc <process_data>
			txcount = 0;  // Reset the txcount for the next operation
		}
	}

	//BERR error akkor fordul elő ha változik a kommunikáció iránya
}
 8000294:	e008      	b.n	80002a8 <HAL_I2C_ErrorCallback+0x3c>
			bytesTransd = txcount-1;  // the txcount is 1 higher than the actual data transmitted
 8000296:	4b06      	ldr	r3, [pc, #24]	@ (80002b0 <HAL_I2C_ErrorCallback+0x44>)
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	3b01      	subs	r3, #1
 800029c:	b2da      	uxtb	r2, r3
 800029e:	4b06      	ldr	r3, [pc, #24]	@ (80002b8 <HAL_I2C_ErrorCallback+0x4c>)
 80002a0:	701a      	strb	r2, [r3, #0]
			txcount = 0;  // Reset the txcount for the next operation
 80002a2:	4b03      	ldr	r3, [pc, #12]	@ (80002b0 <HAL_I2C_ErrorCallback+0x44>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	701a      	strb	r2, [r3, #0]
}
 80002a8:	bf00      	nop
 80002aa:	3710      	adds	r7, #16
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	20000041 	.word	0x20000041
 80002b4:	20000040 	.word	0x20000040
 80002b8:	20000042 	.word	0x20000042

080002bc <process_data>:


void process_data(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
	for(int i = 0; i < RxSIZE; i++){
 80002c2:	2300      	movs	r3, #0
 80002c4:	607b      	str	r3, [r7, #4]
 80002c6:	e00b      	b.n	80002e0 <process_data+0x24>
		TxData[i] = RxData[i];
 80002c8:	4a13      	ldr	r2, [pc, #76]	@ (8000318 <process_data+0x5c>)
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	4413      	add	r3, r2
 80002ce:	7819      	ldrb	r1, [r3, #0]
 80002d0:	4a12      	ldr	r2, [pc, #72]	@ (800031c <process_data+0x60>)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	4413      	add	r3, r2
 80002d6:	460a      	mov	r2, r1
 80002d8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < RxSIZE; i++){
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	3301      	adds	r3, #1
 80002de:	607b      	str	r3, [r7, #4]
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	2b07      	cmp	r3, #7
 80002e4:	ddf0      	ble.n	80002c8 <process_data+0xc>
	}
	for(int j = RxSIZE; j < TxSIZE; j++)
 80002e6:	2308      	movs	r3, #8
 80002e8:	603b      	str	r3, [r7, #0]
 80002ea:	e00b      	b.n	8000304 <process_data+0x48>
	{
		TxData[j] = RxData[j-RxSIZE];
 80002ec:	683b      	ldr	r3, [r7, #0]
 80002ee:	3b08      	subs	r3, #8
 80002f0:	4a09      	ldr	r2, [pc, #36]	@ (8000318 <process_data+0x5c>)
 80002f2:	5cd1      	ldrb	r1, [r2, r3]
 80002f4:	4a09      	ldr	r2, [pc, #36]	@ (800031c <process_data+0x60>)
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	4413      	add	r3, r2
 80002fa:	460a      	mov	r2, r1
 80002fc:	701a      	strb	r2, [r3, #0]
	for(int j = RxSIZE; j < TxSIZE; j++)
 80002fe:	683b      	ldr	r3, [r7, #0]
 8000300:	3301      	adds	r3, #1
 8000302:	603b      	str	r3, [r7, #0]
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	2b0f      	cmp	r3, #15
 8000308:	ddf0      	ble.n	80002ec <process_data+0x30>
	}

}
 800030a:	bf00      	nop
 800030c:	bf00      	nop
 800030e:	370c      	adds	r7, #12
 8000310:	46bd      	mov	sp, r7
 8000312:	bc80      	pop	{r7}
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	20000038 	.word	0x20000038
 800031c:	20000000 	.word	0x20000000

08000320 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000324:	f000 f9be 	bl	80006a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000328:	f000 f80c 	bl	8000344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800032c:	f000 f87c 	bl	8000428 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000330:	f000 f84c 	bl	80003cc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  HAL_I2C_EnableListen_IT(&hi2c1);
 8000334:	4802      	ldr	r0, [pc, #8]	@ (8000340 <main+0x20>)
 8000336:	f000 ff83 	bl	8001240 <HAL_I2C_EnableListen_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800033a:	bf00      	nop
 800033c:	e7fd      	b.n	800033a <main+0x1a>
 800033e:	bf00      	nop
 8000340:	20000044 	.word	0x20000044

08000344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b090      	sub	sp, #64	@ 0x40
 8000348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800034a:	f107 0318 	add.w	r3, r7, #24
 800034e:	2228      	movs	r2, #40	@ 0x28
 8000350:	2100      	movs	r1, #0
 8000352:	4618      	mov	r0, r3
 8000354:	f003 f83e 	bl	80033d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000358:	1d3b      	adds	r3, r7, #4
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
 800035e:	605a      	str	r2, [r3, #4]
 8000360:	609a      	str	r2, [r3, #8]
 8000362:	60da      	str	r2, [r3, #12]
 8000364:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000366:	2301      	movs	r3, #1
 8000368:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800036a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800036e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000370:	2300      	movs	r3, #0
 8000372:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000374:	2301      	movs	r3, #1
 8000376:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000378:	2302      	movs	r3, #2
 800037a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800037c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000380:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000382:	2300      	movs	r3, #0
 8000384:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000386:	f107 0318 	add.w	r3, r7, #24
 800038a:	4618      	mov	r0, r3
 800038c:	f002 fc26 	bl	8002bdc <HAL_RCC_OscConfig>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000396:	f000 f893 	bl	80004c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800039a:	230f      	movs	r3, #15
 800039c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800039e:	2302      	movs	r3, #2
 80003a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003a2:	2300      	movs	r3, #0
 80003a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003a6:	2300      	movs	r3, #0
 80003a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003aa:	2300      	movs	r3, #0
 80003ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003ae:	1d3b      	adds	r3, r7, #4
 80003b0:	2100      	movs	r1, #0
 80003b2:	4618      	mov	r0, r3
 80003b4:	f002 fe94 	bl	80030e0 <HAL_RCC_ClockConfig>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80003be:	f000 f87f 	bl	80004c0 <Error_Handler>
  }
}
 80003c2:	bf00      	nop
 80003c4:	3740      	adds	r7, #64	@ 0x40
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
	...

080003cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003d0:	4b12      	ldr	r3, [pc, #72]	@ (800041c <MX_I2C1_Init+0x50>)
 80003d2:	4a13      	ldr	r2, [pc, #76]	@ (8000420 <MX_I2C1_Init+0x54>)
 80003d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80003d6:	4b11      	ldr	r3, [pc, #68]	@ (800041c <MX_I2C1_Init+0x50>)
 80003d8:	4a12      	ldr	r2, [pc, #72]	@ (8000424 <MX_I2C1_Init+0x58>)
 80003da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003dc:	4b0f      	ldr	r3, [pc, #60]	@ (800041c <MX_I2C1_Init+0x50>)
 80003de:	2200      	movs	r2, #0
 80003e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 208;
 80003e2:	4b0e      	ldr	r3, [pc, #56]	@ (800041c <MX_I2C1_Init+0x50>)
 80003e4:	22d0      	movs	r2, #208	@ 0xd0
 80003e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003e8:	4b0c      	ldr	r3, [pc, #48]	@ (800041c <MX_I2C1_Init+0x50>)
 80003ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80003ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003f0:	4b0a      	ldr	r3, [pc, #40]	@ (800041c <MX_I2C1_Init+0x50>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80003f6:	4b09      	ldr	r3, [pc, #36]	@ (800041c <MX_I2C1_Init+0x50>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003fc:	4b07      	ldr	r3, [pc, #28]	@ (800041c <MX_I2C1_Init+0x50>)
 80003fe:	2200      	movs	r2, #0
 8000400:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000402:	4b06      	ldr	r3, [pc, #24]	@ (800041c <MX_I2C1_Init+0x50>)
 8000404:	2200      	movs	r2, #0
 8000406:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000408:	4804      	ldr	r0, [pc, #16]	@ (800041c <MX_I2C1_Init+0x50>)
 800040a:	f000 fcdd 	bl	8000dc8 <HAL_I2C_Init>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000414:	f000 f854 	bl	80004c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000418:	bf00      	nop
 800041a:	bd80      	pop	{r7, pc}
 800041c:	20000044 	.word	0x20000044
 8000420:	40005400 	.word	0x40005400
 8000424:	000186a0 	.word	0x000186a0

08000428 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b088      	sub	sp, #32
 800042c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800042e:	f107 0310 	add.w	r3, r7, #16
 8000432:	2200      	movs	r2, #0
 8000434:	601a      	str	r2, [r3, #0]
 8000436:	605a      	str	r2, [r3, #4]
 8000438:	609a      	str	r2, [r3, #8]
 800043a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800043c:	4b1e      	ldr	r3, [pc, #120]	@ (80004b8 <MX_GPIO_Init+0x90>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	4a1d      	ldr	r2, [pc, #116]	@ (80004b8 <MX_GPIO_Init+0x90>)
 8000442:	f043 0310 	orr.w	r3, r3, #16
 8000446:	6193      	str	r3, [r2, #24]
 8000448:	4b1b      	ldr	r3, [pc, #108]	@ (80004b8 <MX_GPIO_Init+0x90>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	f003 0310 	and.w	r3, r3, #16
 8000450:	60fb      	str	r3, [r7, #12]
 8000452:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000454:	4b18      	ldr	r3, [pc, #96]	@ (80004b8 <MX_GPIO_Init+0x90>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	4a17      	ldr	r2, [pc, #92]	@ (80004b8 <MX_GPIO_Init+0x90>)
 800045a:	f043 0320 	orr.w	r3, r3, #32
 800045e:	6193      	str	r3, [r2, #24]
 8000460:	4b15      	ldr	r3, [pc, #84]	@ (80004b8 <MX_GPIO_Init+0x90>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	f003 0320 	and.w	r3, r3, #32
 8000468:	60bb      	str	r3, [r7, #8]
 800046a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800046c:	4b12      	ldr	r3, [pc, #72]	@ (80004b8 <MX_GPIO_Init+0x90>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	4a11      	ldr	r2, [pc, #68]	@ (80004b8 <MX_GPIO_Init+0x90>)
 8000472:	f043 0308 	orr.w	r3, r3, #8
 8000476:	6193      	str	r3, [r2, #24]
 8000478:	4b0f      	ldr	r3, [pc, #60]	@ (80004b8 <MX_GPIO_Init+0x90>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	f003 0308 	and.w	r3, r3, #8
 8000480:	607b      	str	r3, [r7, #4]
 8000482:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000484:	2200      	movs	r2, #0
 8000486:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800048a:	480c      	ldr	r0, [pc, #48]	@ (80004bc <MX_GPIO_Init+0x94>)
 800048c:	f000 fc84 	bl	8000d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000490:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000494:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000496:	2301      	movs	r3, #1
 8000498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049a:	2300      	movs	r3, #0
 800049c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049e:	2302      	movs	r3, #2
 80004a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004a2:	f107 0310 	add.w	r3, r7, #16
 80004a6:	4619      	mov	r1, r3
 80004a8:	4804      	ldr	r0, [pc, #16]	@ (80004bc <MX_GPIO_Init+0x94>)
 80004aa:	f000 faf1 	bl	8000a90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004ae:	bf00      	nop
 80004b0:	3720      	adds	r7, #32
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	40021000 	.word	0x40021000
 80004bc:	40011000 	.word	0x40011000

080004c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004c4:	b672      	cpsid	i
}
 80004c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004c8:	bf00      	nop
 80004ca:	e7fd      	b.n	80004c8 <Error_Handler+0x8>

080004cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004d2:	4b15      	ldr	r3, [pc, #84]	@ (8000528 <HAL_MspInit+0x5c>)
 80004d4:	699b      	ldr	r3, [r3, #24]
 80004d6:	4a14      	ldr	r2, [pc, #80]	@ (8000528 <HAL_MspInit+0x5c>)
 80004d8:	f043 0301 	orr.w	r3, r3, #1
 80004dc:	6193      	str	r3, [r2, #24]
 80004de:	4b12      	ldr	r3, [pc, #72]	@ (8000528 <HAL_MspInit+0x5c>)
 80004e0:	699b      	ldr	r3, [r3, #24]
 80004e2:	f003 0301 	and.w	r3, r3, #1
 80004e6:	60bb      	str	r3, [r7, #8]
 80004e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000528 <HAL_MspInit+0x5c>)
 80004ec:	69db      	ldr	r3, [r3, #28]
 80004ee:	4a0e      	ldr	r2, [pc, #56]	@ (8000528 <HAL_MspInit+0x5c>)
 80004f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004f4:	61d3      	str	r3, [r2, #28]
 80004f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000528 <HAL_MspInit+0x5c>)
 80004f8:	69db      	ldr	r3, [r3, #28]
 80004fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004fe:	607b      	str	r3, [r7, #4]
 8000500:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000502:	4b0a      	ldr	r3, [pc, #40]	@ (800052c <HAL_MspInit+0x60>)
 8000504:	685b      	ldr	r3, [r3, #4]
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	4a04      	ldr	r2, [pc, #16]	@ (800052c <HAL_MspInit+0x60>)
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800051e:	bf00      	nop
 8000520:	3714      	adds	r7, #20
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr
 8000528:	40021000 	.word	0x40021000
 800052c:	40010000 	.word	0x40010000

08000530 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b088      	sub	sp, #32
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000538:	f107 0310 	add.w	r3, r7, #16
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a1d      	ldr	r2, [pc, #116]	@ (80005c0 <HAL_I2C_MspInit+0x90>)
 800054c:	4293      	cmp	r3, r2
 800054e:	d133      	bne.n	80005b8 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000550:	4b1c      	ldr	r3, [pc, #112]	@ (80005c4 <HAL_I2C_MspInit+0x94>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	4a1b      	ldr	r2, [pc, #108]	@ (80005c4 <HAL_I2C_MspInit+0x94>)
 8000556:	f043 0308 	orr.w	r3, r3, #8
 800055a:	6193      	str	r3, [r2, #24]
 800055c:	4b19      	ldr	r3, [pc, #100]	@ (80005c4 <HAL_I2C_MspInit+0x94>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	f003 0308 	and.w	r3, r3, #8
 8000564:	60fb      	str	r3, [r7, #12]
 8000566:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000568:	23c0      	movs	r3, #192	@ 0xc0
 800056a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800056c:	2312      	movs	r3, #18
 800056e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000570:	2303      	movs	r3, #3
 8000572:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000574:	f107 0310 	add.w	r3, r7, #16
 8000578:	4619      	mov	r1, r3
 800057a:	4813      	ldr	r0, [pc, #76]	@ (80005c8 <HAL_I2C_MspInit+0x98>)
 800057c:	f000 fa88 	bl	8000a90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000580:	4b10      	ldr	r3, [pc, #64]	@ (80005c4 <HAL_I2C_MspInit+0x94>)
 8000582:	69db      	ldr	r3, [r3, #28]
 8000584:	4a0f      	ldr	r2, [pc, #60]	@ (80005c4 <HAL_I2C_MspInit+0x94>)
 8000586:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800058a:	61d3      	str	r3, [r2, #28]
 800058c:	4b0d      	ldr	r3, [pc, #52]	@ (80005c4 <HAL_I2C_MspInit+0x94>)
 800058e:	69db      	ldr	r3, [r3, #28]
 8000590:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000594:	60bb      	str	r3, [r7, #8]
 8000596:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000598:	2200      	movs	r2, #0
 800059a:	2100      	movs	r1, #0
 800059c:	201f      	movs	r0, #31
 800059e:	f000 f9ba 	bl	8000916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80005a2:	201f      	movs	r0, #31
 80005a4:	f000 f9d3 	bl	800094e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80005a8:	2200      	movs	r2, #0
 80005aa:	2100      	movs	r1, #0
 80005ac:	2020      	movs	r0, #32
 80005ae:	f000 f9b2 	bl	8000916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80005b2:	2020      	movs	r0, #32
 80005b4:	f000 f9cb 	bl	800094e <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80005b8:	bf00      	nop
 80005ba:	3720      	adds	r7, #32
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	40005400 	.word	0x40005400
 80005c4:	40021000 	.word	0x40021000
 80005c8:	40010c00 	.word	0x40010c00

080005cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005d0:	bf00      	nop
 80005d2:	e7fd      	b.n	80005d0 <NMI_Handler+0x4>

080005d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005d8:	bf00      	nop
 80005da:	e7fd      	b.n	80005d8 <HardFault_Handler+0x4>

080005dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005e0:	bf00      	nop
 80005e2:	e7fd      	b.n	80005e0 <MemManage_Handler+0x4>

080005e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005e8:	bf00      	nop
 80005ea:	e7fd      	b.n	80005e8 <BusFault_Handler+0x4>

080005ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005f0:	bf00      	nop
 80005f2:	e7fd      	b.n	80005f0 <UsageFault_Handler+0x4>

080005f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr

08000600 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr

0800060c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr

08000618 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800061c:	f000 f888 	bl	8000730 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}

08000624 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000628:	4802      	ldr	r0, [pc, #8]	@ (8000634 <I2C1_EV_IRQHandler+0x10>)
 800062a:	f000 fe3e 	bl	80012aa <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	20000044 	.word	0x20000044

08000638 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800063c:	4802      	ldr	r0, [pc, #8]	@ (8000648 <I2C1_ER_IRQHandler+0x10>)
 800063e:	f000 ff87 	bl	8001550 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000044 	.word	0x20000044

0800064c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000650:	bf00      	nop
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr

08000658 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000658:	f7ff fff8 	bl	800064c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800065c:	480b      	ldr	r0, [pc, #44]	@ (800068c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800065e:	490c      	ldr	r1, [pc, #48]	@ (8000690 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000660:	4a0c      	ldr	r2, [pc, #48]	@ (8000694 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000662:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000664:	e002      	b.n	800066c <LoopCopyDataInit>

08000666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800066a:	3304      	adds	r3, #4

0800066c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800066c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800066e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000670:	d3f9      	bcc.n	8000666 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000672:	4a09      	ldr	r2, [pc, #36]	@ (8000698 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000674:	4c09      	ldr	r4, [pc, #36]	@ (800069c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000678:	e001      	b.n	800067e <LoopFillZerobss>

0800067a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800067a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800067c:	3204      	adds	r2, #4

0800067e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800067e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000680:	d3fb      	bcc.n	800067a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000682:	f002 feaf 	bl	80033e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000686:	f7ff fe4b 	bl	8000320 <main>
  bx lr
 800068a:	4770      	bx	lr
  ldr r0, =_sdata
 800068c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000690:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000694:	08003478 	.word	0x08003478
  ldr r2, =_sbss
 8000698:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 800069c:	2000009c 	.word	0x2000009c

080006a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006a0:	e7fe      	b.n	80006a0 <ADC1_2_IRQHandler>
	...

080006a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006a8:	4b08      	ldr	r3, [pc, #32]	@ (80006cc <HAL_Init+0x28>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a07      	ldr	r2, [pc, #28]	@ (80006cc <HAL_Init+0x28>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006b4:	2003      	movs	r0, #3
 80006b6:	f000 f923 	bl	8000900 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006ba:	200f      	movs	r0, #15
 80006bc:	f000 f808 	bl	80006d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006c0:	f7ff ff04 	bl	80004cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006c4:	2300      	movs	r3, #0
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40022000 	.word	0x40022000

080006d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006d8:	4b12      	ldr	r3, [pc, #72]	@ (8000724 <HAL_InitTick+0x54>)
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	4b12      	ldr	r3, [pc, #72]	@ (8000728 <HAL_InitTick+0x58>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	4619      	mov	r1, r3
 80006e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 f93b 	bl	800096a <HAL_SYSTICK_Config>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006fa:	2301      	movs	r3, #1
 80006fc:	e00e      	b.n	800071c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2b0f      	cmp	r3, #15
 8000702:	d80a      	bhi.n	800071a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000704:	2200      	movs	r2, #0
 8000706:	6879      	ldr	r1, [r7, #4]
 8000708:	f04f 30ff 	mov.w	r0, #4294967295
 800070c:	f000 f903 	bl	8000916 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000710:	4a06      	ldr	r2, [pc, #24]	@ (800072c <HAL_InitTick+0x5c>)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000716:	2300      	movs	r3, #0
 8000718:	e000      	b.n	800071c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800071a:	2301      	movs	r3, #1
}
 800071c:	4618      	mov	r0, r3
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000010 	.word	0x20000010
 8000728:	20000018 	.word	0x20000018
 800072c:	20000014 	.word	0x20000014

08000730 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000734:	4b05      	ldr	r3, [pc, #20]	@ (800074c <HAL_IncTick+0x1c>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	461a      	mov	r2, r3
 800073a:	4b05      	ldr	r3, [pc, #20]	@ (8000750 <HAL_IncTick+0x20>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4413      	add	r3, r2
 8000740:	4a03      	ldr	r2, [pc, #12]	@ (8000750 <HAL_IncTick+0x20>)
 8000742:	6013      	str	r3, [r2, #0]
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr
 800074c:	20000018 	.word	0x20000018
 8000750:	20000098 	.word	0x20000098

08000754 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  return uwTick;
 8000758:	4b02      	ldr	r3, [pc, #8]	@ (8000764 <HAL_GetTick+0x10>)
 800075a:	681b      	ldr	r3, [r3, #0]
}
 800075c:	4618      	mov	r0, r3
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr
 8000764:	20000098 	.word	0x20000098

08000768 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	f003 0307 	and.w	r3, r3, #7
 8000776:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000778:	4b0c      	ldr	r3, [pc, #48]	@ (80007ac <__NVIC_SetPriorityGrouping+0x44>)
 800077a:	68db      	ldr	r3, [r3, #12]
 800077c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800077e:	68ba      	ldr	r2, [r7, #8]
 8000780:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000784:	4013      	ands	r3, r2
 8000786:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000790:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000794:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000798:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800079a:	4a04      	ldr	r2, [pc, #16]	@ (80007ac <__NVIC_SetPriorityGrouping+0x44>)
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	60d3      	str	r3, [r2, #12]
}
 80007a0:	bf00      	nop
 80007a2:	3714      	adds	r7, #20
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc80      	pop	{r7}
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	e000ed00 	.word	0xe000ed00

080007b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007b4:	4b04      	ldr	r3, [pc, #16]	@ (80007c8 <__NVIC_GetPriorityGrouping+0x18>)
 80007b6:	68db      	ldr	r3, [r3, #12]
 80007b8:	0a1b      	lsrs	r3, r3, #8
 80007ba:	f003 0307 	and.w	r3, r3, #7
}
 80007be:	4618      	mov	r0, r3
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	e000ed00 	.word	0xe000ed00

080007cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	db0b      	blt.n	80007f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	f003 021f 	and.w	r2, r3, #31
 80007e4:	4906      	ldr	r1, [pc, #24]	@ (8000800 <__NVIC_EnableIRQ+0x34>)
 80007e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ea:	095b      	lsrs	r3, r3, #5
 80007ec:	2001      	movs	r0, #1
 80007ee:	fa00 f202 	lsl.w	r2, r0, r2
 80007f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bc80      	pop	{r7}
 80007fe:	4770      	bx	lr
 8000800:	e000e100 	.word	0xe000e100

08000804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	6039      	str	r1, [r7, #0]
 800080e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000814:	2b00      	cmp	r3, #0
 8000816:	db0a      	blt.n	800082e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	b2da      	uxtb	r2, r3
 800081c:	490c      	ldr	r1, [pc, #48]	@ (8000850 <__NVIC_SetPriority+0x4c>)
 800081e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000822:	0112      	lsls	r2, r2, #4
 8000824:	b2d2      	uxtb	r2, r2
 8000826:	440b      	add	r3, r1
 8000828:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800082c:	e00a      	b.n	8000844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	b2da      	uxtb	r2, r3
 8000832:	4908      	ldr	r1, [pc, #32]	@ (8000854 <__NVIC_SetPriority+0x50>)
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	f003 030f 	and.w	r3, r3, #15
 800083a:	3b04      	subs	r3, #4
 800083c:	0112      	lsls	r2, r2, #4
 800083e:	b2d2      	uxtb	r2, r2
 8000840:	440b      	add	r3, r1
 8000842:	761a      	strb	r2, [r3, #24]
}
 8000844:	bf00      	nop
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	bc80      	pop	{r7}
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	e000e100 	.word	0xe000e100
 8000854:	e000ed00 	.word	0xe000ed00

08000858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000858:	b480      	push	{r7}
 800085a:	b089      	sub	sp, #36	@ 0x24
 800085c:	af00      	add	r7, sp, #0
 800085e:	60f8      	str	r0, [r7, #12]
 8000860:	60b9      	str	r1, [r7, #8]
 8000862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	f003 0307 	and.w	r3, r3, #7
 800086a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800086c:	69fb      	ldr	r3, [r7, #28]
 800086e:	f1c3 0307 	rsb	r3, r3, #7
 8000872:	2b04      	cmp	r3, #4
 8000874:	bf28      	it	cs
 8000876:	2304      	movcs	r3, #4
 8000878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	3304      	adds	r3, #4
 800087e:	2b06      	cmp	r3, #6
 8000880:	d902      	bls.n	8000888 <NVIC_EncodePriority+0x30>
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	3b03      	subs	r3, #3
 8000886:	e000      	b.n	800088a <NVIC_EncodePriority+0x32>
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800088c:	f04f 32ff 	mov.w	r2, #4294967295
 8000890:	69bb      	ldr	r3, [r7, #24]
 8000892:	fa02 f303 	lsl.w	r3, r2, r3
 8000896:	43da      	mvns	r2, r3
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	401a      	ands	r2, r3
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008a0:	f04f 31ff 	mov.w	r1, #4294967295
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	fa01 f303 	lsl.w	r3, r1, r3
 80008aa:	43d9      	mvns	r1, r3
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b0:	4313      	orrs	r3, r2
         );
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3724      	adds	r7, #36	@ 0x24
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr

080008bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	3b01      	subs	r3, #1
 80008c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008cc:	d301      	bcc.n	80008d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008ce:	2301      	movs	r3, #1
 80008d0:	e00f      	b.n	80008f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008d2:	4a0a      	ldr	r2, [pc, #40]	@ (80008fc <SysTick_Config+0x40>)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	3b01      	subs	r3, #1
 80008d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008da:	210f      	movs	r1, #15
 80008dc:	f04f 30ff 	mov.w	r0, #4294967295
 80008e0:	f7ff ff90 	bl	8000804 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008e4:	4b05      	ldr	r3, [pc, #20]	@ (80008fc <SysTick_Config+0x40>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ea:	4b04      	ldr	r3, [pc, #16]	@ (80008fc <SysTick_Config+0x40>)
 80008ec:	2207      	movs	r2, #7
 80008ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008f0:	2300      	movs	r3, #0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	e000e010 	.word	0xe000e010

08000900 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f7ff ff2d 	bl	8000768 <__NVIC_SetPriorityGrouping>
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000916:	b580      	push	{r7, lr}
 8000918:	b086      	sub	sp, #24
 800091a:	af00      	add	r7, sp, #0
 800091c:	4603      	mov	r3, r0
 800091e:	60b9      	str	r1, [r7, #8]
 8000920:	607a      	str	r2, [r7, #4]
 8000922:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000928:	f7ff ff42 	bl	80007b0 <__NVIC_GetPriorityGrouping>
 800092c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	68b9      	ldr	r1, [r7, #8]
 8000932:	6978      	ldr	r0, [r7, #20]
 8000934:	f7ff ff90 	bl	8000858 <NVIC_EncodePriority>
 8000938:	4602      	mov	r2, r0
 800093a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800093e:	4611      	mov	r1, r2
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff ff5f 	bl	8000804 <__NVIC_SetPriority>
}
 8000946:	bf00      	nop
 8000948:	3718      	adds	r7, #24
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b082      	sub	sp, #8
 8000952:	af00      	add	r7, sp, #0
 8000954:	4603      	mov	r3, r0
 8000956:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff ff35 	bl	80007cc <__NVIC_EnableIRQ>
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800096a:	b580      	push	{r7, lr}
 800096c:	b082      	sub	sp, #8
 800096e:	af00      	add	r7, sp, #0
 8000970:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f7ff ffa2 	bl	80008bc <SysTick_Config>
 8000978:	4603      	mov	r3, r0
}
 800097a:	4618      	mov	r0, r3
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
	...

08000984 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800098c:	2300      	movs	r3, #0
 800098e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000996:	b2db      	uxtb	r3, r3
 8000998:	2b02      	cmp	r3, #2
 800099a:	d005      	beq.n	80009a8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2204      	movs	r2, #4
 80009a0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
 80009a4:	73fb      	strb	r3, [r7, #15]
 80009a6:	e051      	b.n	8000a4c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f022 020e 	bic.w	r2, r2, #14
 80009b6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f022 0201 	bic.w	r2, r2, #1
 80009c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a22      	ldr	r2, [pc, #136]	@ (8000a58 <HAL_DMA_Abort_IT+0xd4>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d029      	beq.n	8000a26 <HAL_DMA_Abort_IT+0xa2>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a21      	ldr	r2, [pc, #132]	@ (8000a5c <HAL_DMA_Abort_IT+0xd8>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d022      	beq.n	8000a22 <HAL_DMA_Abort_IT+0x9e>
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a1f      	ldr	r2, [pc, #124]	@ (8000a60 <HAL_DMA_Abort_IT+0xdc>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d01a      	beq.n	8000a1c <HAL_DMA_Abort_IT+0x98>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a1e      	ldr	r2, [pc, #120]	@ (8000a64 <HAL_DMA_Abort_IT+0xe0>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d012      	beq.n	8000a16 <HAL_DMA_Abort_IT+0x92>
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a1c      	ldr	r2, [pc, #112]	@ (8000a68 <HAL_DMA_Abort_IT+0xe4>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d00a      	beq.n	8000a10 <HAL_DMA_Abort_IT+0x8c>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a1b      	ldr	r2, [pc, #108]	@ (8000a6c <HAL_DMA_Abort_IT+0xe8>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d102      	bne.n	8000a0a <HAL_DMA_Abort_IT+0x86>
 8000a04:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000a08:	e00e      	b.n	8000a28 <HAL_DMA_Abort_IT+0xa4>
 8000a0a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000a0e:	e00b      	b.n	8000a28 <HAL_DMA_Abort_IT+0xa4>
 8000a10:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a14:	e008      	b.n	8000a28 <HAL_DMA_Abort_IT+0xa4>
 8000a16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a1a:	e005      	b.n	8000a28 <HAL_DMA_Abort_IT+0xa4>
 8000a1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a20:	e002      	b.n	8000a28 <HAL_DMA_Abort_IT+0xa4>
 8000a22:	2310      	movs	r3, #16
 8000a24:	e000      	b.n	8000a28 <HAL_DMA_Abort_IT+0xa4>
 8000a26:	2301      	movs	r3, #1
 8000a28:	4a11      	ldr	r2, [pc, #68]	@ (8000a70 <HAL_DMA_Abort_IT+0xec>)
 8000a2a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2201      	movs	r2, #1
 8000a30:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2200      	movs	r2, #0
 8000a38:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d003      	beq.n	8000a4c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	4798      	blx	r3
    } 
  }
  return status;
 8000a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40020008 	.word	0x40020008
 8000a5c:	4002001c 	.word	0x4002001c
 8000a60:	40020030 	.word	0x40020030
 8000a64:	40020044 	.word	0x40020044
 8000a68:	40020058 	.word	0x40020058
 8000a6c:	4002006c 	.word	0x4002006c
 8000a70:	40020000 	.word	0x40020000

08000a74 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000a82:	b2db      	uxtb	r3, r3
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc80      	pop	{r7}
 8000a8c:	4770      	bx	lr
	...

08000a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b08b      	sub	sp, #44	@ 0x2c
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aa2:	e169      	b.n	8000d78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	69fa      	ldr	r2, [r7, #28]
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ab8:	69ba      	ldr	r2, [r7, #24]
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	f040 8158 	bne.w	8000d72 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	4a9a      	ldr	r2, [pc, #616]	@ (8000d30 <HAL_GPIO_Init+0x2a0>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d05e      	beq.n	8000b8a <HAL_GPIO_Init+0xfa>
 8000acc:	4a98      	ldr	r2, [pc, #608]	@ (8000d30 <HAL_GPIO_Init+0x2a0>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d875      	bhi.n	8000bbe <HAL_GPIO_Init+0x12e>
 8000ad2:	4a98      	ldr	r2, [pc, #608]	@ (8000d34 <HAL_GPIO_Init+0x2a4>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d058      	beq.n	8000b8a <HAL_GPIO_Init+0xfa>
 8000ad8:	4a96      	ldr	r2, [pc, #600]	@ (8000d34 <HAL_GPIO_Init+0x2a4>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d86f      	bhi.n	8000bbe <HAL_GPIO_Init+0x12e>
 8000ade:	4a96      	ldr	r2, [pc, #600]	@ (8000d38 <HAL_GPIO_Init+0x2a8>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d052      	beq.n	8000b8a <HAL_GPIO_Init+0xfa>
 8000ae4:	4a94      	ldr	r2, [pc, #592]	@ (8000d38 <HAL_GPIO_Init+0x2a8>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d869      	bhi.n	8000bbe <HAL_GPIO_Init+0x12e>
 8000aea:	4a94      	ldr	r2, [pc, #592]	@ (8000d3c <HAL_GPIO_Init+0x2ac>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d04c      	beq.n	8000b8a <HAL_GPIO_Init+0xfa>
 8000af0:	4a92      	ldr	r2, [pc, #584]	@ (8000d3c <HAL_GPIO_Init+0x2ac>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d863      	bhi.n	8000bbe <HAL_GPIO_Init+0x12e>
 8000af6:	4a92      	ldr	r2, [pc, #584]	@ (8000d40 <HAL_GPIO_Init+0x2b0>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d046      	beq.n	8000b8a <HAL_GPIO_Init+0xfa>
 8000afc:	4a90      	ldr	r2, [pc, #576]	@ (8000d40 <HAL_GPIO_Init+0x2b0>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d85d      	bhi.n	8000bbe <HAL_GPIO_Init+0x12e>
 8000b02:	2b12      	cmp	r3, #18
 8000b04:	d82a      	bhi.n	8000b5c <HAL_GPIO_Init+0xcc>
 8000b06:	2b12      	cmp	r3, #18
 8000b08:	d859      	bhi.n	8000bbe <HAL_GPIO_Init+0x12e>
 8000b0a:	a201      	add	r2, pc, #4	@ (adr r2, 8000b10 <HAL_GPIO_Init+0x80>)
 8000b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b10:	08000b8b 	.word	0x08000b8b
 8000b14:	08000b65 	.word	0x08000b65
 8000b18:	08000b77 	.word	0x08000b77
 8000b1c:	08000bb9 	.word	0x08000bb9
 8000b20:	08000bbf 	.word	0x08000bbf
 8000b24:	08000bbf 	.word	0x08000bbf
 8000b28:	08000bbf 	.word	0x08000bbf
 8000b2c:	08000bbf 	.word	0x08000bbf
 8000b30:	08000bbf 	.word	0x08000bbf
 8000b34:	08000bbf 	.word	0x08000bbf
 8000b38:	08000bbf 	.word	0x08000bbf
 8000b3c:	08000bbf 	.word	0x08000bbf
 8000b40:	08000bbf 	.word	0x08000bbf
 8000b44:	08000bbf 	.word	0x08000bbf
 8000b48:	08000bbf 	.word	0x08000bbf
 8000b4c:	08000bbf 	.word	0x08000bbf
 8000b50:	08000bbf 	.word	0x08000bbf
 8000b54:	08000b6d 	.word	0x08000b6d
 8000b58:	08000b81 	.word	0x08000b81
 8000b5c:	4a79      	ldr	r2, [pc, #484]	@ (8000d44 <HAL_GPIO_Init+0x2b4>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d013      	beq.n	8000b8a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b62:	e02c      	b.n	8000bbe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	623b      	str	r3, [r7, #32]
          break;
 8000b6a:	e029      	b.n	8000bc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	3304      	adds	r3, #4
 8000b72:	623b      	str	r3, [r7, #32]
          break;
 8000b74:	e024      	b.n	8000bc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	68db      	ldr	r3, [r3, #12]
 8000b7a:	3308      	adds	r3, #8
 8000b7c:	623b      	str	r3, [r7, #32]
          break;
 8000b7e:	e01f      	b.n	8000bc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	330c      	adds	r3, #12
 8000b86:	623b      	str	r3, [r7, #32]
          break;
 8000b88:	e01a      	b.n	8000bc0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d102      	bne.n	8000b98 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b92:	2304      	movs	r3, #4
 8000b94:	623b      	str	r3, [r7, #32]
          break;
 8000b96:	e013      	b.n	8000bc0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d105      	bne.n	8000bac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ba0:	2308      	movs	r3, #8
 8000ba2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	69fa      	ldr	r2, [r7, #28]
 8000ba8:	611a      	str	r2, [r3, #16]
          break;
 8000baa:	e009      	b.n	8000bc0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bac:	2308      	movs	r3, #8
 8000bae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	69fa      	ldr	r2, [r7, #28]
 8000bb4:	615a      	str	r2, [r3, #20]
          break;
 8000bb6:	e003      	b.n	8000bc0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	623b      	str	r3, [r7, #32]
          break;
 8000bbc:	e000      	b.n	8000bc0 <HAL_GPIO_Init+0x130>
          break;
 8000bbe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	2bff      	cmp	r3, #255	@ 0xff
 8000bc4:	d801      	bhi.n	8000bca <HAL_GPIO_Init+0x13a>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	e001      	b.n	8000bce <HAL_GPIO_Init+0x13e>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	3304      	adds	r3, #4
 8000bce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	2bff      	cmp	r3, #255	@ 0xff
 8000bd4:	d802      	bhi.n	8000bdc <HAL_GPIO_Init+0x14c>
 8000bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	e002      	b.n	8000be2 <HAL_GPIO_Init+0x152>
 8000bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bde:	3b08      	subs	r3, #8
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	210f      	movs	r1, #15
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	401a      	ands	r2, r3
 8000bf4:	6a39      	ldr	r1, [r7, #32]
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfc:	431a      	orrs	r2, r3
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	f000 80b1 	beq.w	8000d72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c10:	4b4d      	ldr	r3, [pc, #308]	@ (8000d48 <HAL_GPIO_Init+0x2b8>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	4a4c      	ldr	r2, [pc, #304]	@ (8000d48 <HAL_GPIO_Init+0x2b8>)
 8000c16:	f043 0301 	orr.w	r3, r3, #1
 8000c1a:	6193      	str	r3, [r2, #24]
 8000c1c:	4b4a      	ldr	r3, [pc, #296]	@ (8000d48 <HAL_GPIO_Init+0x2b8>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c28:	4a48      	ldr	r2, [pc, #288]	@ (8000d4c <HAL_GPIO_Init+0x2bc>)
 8000c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c2c:	089b      	lsrs	r3, r3, #2
 8000c2e:	3302      	adds	r3, #2
 8000c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c34:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c38:	f003 0303 	and.w	r3, r3, #3
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	220f      	movs	r2, #15
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	43db      	mvns	r3, r3
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	4013      	ands	r3, r2
 8000c4a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4a40      	ldr	r2, [pc, #256]	@ (8000d50 <HAL_GPIO_Init+0x2c0>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d013      	beq.n	8000c7c <HAL_GPIO_Init+0x1ec>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4a3f      	ldr	r2, [pc, #252]	@ (8000d54 <HAL_GPIO_Init+0x2c4>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d00d      	beq.n	8000c78 <HAL_GPIO_Init+0x1e8>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4a3e      	ldr	r2, [pc, #248]	@ (8000d58 <HAL_GPIO_Init+0x2c8>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d007      	beq.n	8000c74 <HAL_GPIO_Init+0x1e4>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	4a3d      	ldr	r2, [pc, #244]	@ (8000d5c <HAL_GPIO_Init+0x2cc>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d101      	bne.n	8000c70 <HAL_GPIO_Init+0x1e0>
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	e006      	b.n	8000c7e <HAL_GPIO_Init+0x1ee>
 8000c70:	2304      	movs	r3, #4
 8000c72:	e004      	b.n	8000c7e <HAL_GPIO_Init+0x1ee>
 8000c74:	2302      	movs	r3, #2
 8000c76:	e002      	b.n	8000c7e <HAL_GPIO_Init+0x1ee>
 8000c78:	2301      	movs	r3, #1
 8000c7a:	e000      	b.n	8000c7e <HAL_GPIO_Init+0x1ee>
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c80:	f002 0203 	and.w	r2, r2, #3
 8000c84:	0092      	lsls	r2, r2, #2
 8000c86:	4093      	lsls	r3, r2
 8000c88:	68fa      	ldr	r2, [r7, #12]
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c8e:	492f      	ldr	r1, [pc, #188]	@ (8000d4c <HAL_GPIO_Init+0x2bc>)
 8000c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c92:	089b      	lsrs	r3, r3, #2
 8000c94:	3302      	adds	r3, #2
 8000c96:	68fa      	ldr	r2, [r7, #12]
 8000c98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d006      	beq.n	8000cb6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ca8:	4b2d      	ldr	r3, [pc, #180]	@ (8000d60 <HAL_GPIO_Init+0x2d0>)
 8000caa:	689a      	ldr	r2, [r3, #8]
 8000cac:	492c      	ldr	r1, [pc, #176]	@ (8000d60 <HAL_GPIO_Init+0x2d0>)
 8000cae:	69bb      	ldr	r3, [r7, #24]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	608b      	str	r3, [r1, #8]
 8000cb4:	e006      	b.n	8000cc4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cb6:	4b2a      	ldr	r3, [pc, #168]	@ (8000d60 <HAL_GPIO_Init+0x2d0>)
 8000cb8:	689a      	ldr	r2, [r3, #8]
 8000cba:	69bb      	ldr	r3, [r7, #24]
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	4928      	ldr	r1, [pc, #160]	@ (8000d60 <HAL_GPIO_Init+0x2d0>)
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d006      	beq.n	8000cde <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cd0:	4b23      	ldr	r3, [pc, #140]	@ (8000d60 <HAL_GPIO_Init+0x2d0>)
 8000cd2:	68da      	ldr	r2, [r3, #12]
 8000cd4:	4922      	ldr	r1, [pc, #136]	@ (8000d60 <HAL_GPIO_Init+0x2d0>)
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	60cb      	str	r3, [r1, #12]
 8000cdc:	e006      	b.n	8000cec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cde:	4b20      	ldr	r3, [pc, #128]	@ (8000d60 <HAL_GPIO_Init+0x2d0>)
 8000ce0:	68da      	ldr	r2, [r3, #12]
 8000ce2:	69bb      	ldr	r3, [r7, #24]
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	491e      	ldr	r1, [pc, #120]	@ (8000d60 <HAL_GPIO_Init+0x2d0>)
 8000ce8:	4013      	ands	r3, r2
 8000cea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d006      	beq.n	8000d06 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cf8:	4b19      	ldr	r3, [pc, #100]	@ (8000d60 <HAL_GPIO_Init+0x2d0>)
 8000cfa:	685a      	ldr	r2, [r3, #4]
 8000cfc:	4918      	ldr	r1, [pc, #96]	@ (8000d60 <HAL_GPIO_Init+0x2d0>)
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	604b      	str	r3, [r1, #4]
 8000d04:	e006      	b.n	8000d14 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d06:	4b16      	ldr	r3, [pc, #88]	@ (8000d60 <HAL_GPIO_Init+0x2d0>)
 8000d08:	685a      	ldr	r2, [r3, #4]
 8000d0a:	69bb      	ldr	r3, [r7, #24]
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	4914      	ldr	r1, [pc, #80]	@ (8000d60 <HAL_GPIO_Init+0x2d0>)
 8000d10:	4013      	ands	r3, r2
 8000d12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d021      	beq.n	8000d64 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d20:	4b0f      	ldr	r3, [pc, #60]	@ (8000d60 <HAL_GPIO_Init+0x2d0>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	490e      	ldr	r1, [pc, #56]	@ (8000d60 <HAL_GPIO_Init+0x2d0>)
 8000d26:	69bb      	ldr	r3, [r7, #24]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	600b      	str	r3, [r1, #0]
 8000d2c:	e021      	b.n	8000d72 <HAL_GPIO_Init+0x2e2>
 8000d2e:	bf00      	nop
 8000d30:	10320000 	.word	0x10320000
 8000d34:	10310000 	.word	0x10310000
 8000d38:	10220000 	.word	0x10220000
 8000d3c:	10210000 	.word	0x10210000
 8000d40:	10120000 	.word	0x10120000
 8000d44:	10110000 	.word	0x10110000
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	40010000 	.word	0x40010000
 8000d50:	40010800 	.word	0x40010800
 8000d54:	40010c00 	.word	0x40010c00
 8000d58:	40011000 	.word	0x40011000
 8000d5c:	40011400 	.word	0x40011400
 8000d60:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d64:	4b0b      	ldr	r3, [pc, #44]	@ (8000d94 <HAL_GPIO_Init+0x304>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	69bb      	ldr	r3, [r7, #24]
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	4909      	ldr	r1, [pc, #36]	@ (8000d94 <HAL_GPIO_Init+0x304>)
 8000d6e:	4013      	ands	r3, r2
 8000d70:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d74:	3301      	adds	r3, #1
 8000d76:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f47f ae8e 	bne.w	8000aa4 <HAL_GPIO_Init+0x14>
  }
}
 8000d88:	bf00      	nop
 8000d8a:	bf00      	nop
 8000d8c:	372c      	adds	r7, #44	@ 0x2c
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bc80      	pop	{r7}
 8000d92:	4770      	bx	lr
 8000d94:	40010400 	.word	0x40010400

08000d98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	460b      	mov	r3, r1
 8000da2:	807b      	strh	r3, [r7, #2]
 8000da4:	4613      	mov	r3, r2
 8000da6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000da8:	787b      	ldrb	r3, [r7, #1]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d003      	beq.n	8000db6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000dae:	887a      	ldrh	r2, [r7, #2]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000db4:	e003      	b.n	8000dbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000db6:	887b      	ldrh	r3, [r7, #2]
 8000db8:	041a      	lsls	r2, r3, #16
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	611a      	str	r2, [r3, #16]
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr

08000dc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d101      	bne.n	8000dda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e12b      	b.n	8001032 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d106      	bne.n	8000df4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2200      	movs	r2, #0
 8000dea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f7ff fb9e 	bl	8000530 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2224      	movs	r2, #36	@ 0x24
 8000df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f022 0201 	bic.w	r2, r2, #1
 8000e0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000e1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000e2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000e2c:	f002 faa0 	bl	8003370 <HAL_RCC_GetPCLK1Freq>
 8000e30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	4a81      	ldr	r2, [pc, #516]	@ (800103c <HAL_I2C_Init+0x274>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d807      	bhi.n	8000e4c <HAL_I2C_Init+0x84>
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	4a80      	ldr	r2, [pc, #512]	@ (8001040 <HAL_I2C_Init+0x278>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	bf94      	ite	ls
 8000e44:	2301      	movls	r3, #1
 8000e46:	2300      	movhi	r3, #0
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	e006      	b.n	8000e5a <HAL_I2C_Init+0x92>
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	4a7d      	ldr	r2, [pc, #500]	@ (8001044 <HAL_I2C_Init+0x27c>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	bf94      	ite	ls
 8000e54:	2301      	movls	r3, #1
 8000e56:	2300      	movhi	r3, #0
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e0e7      	b.n	8001032 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	4a78      	ldr	r2, [pc, #480]	@ (8001048 <HAL_I2C_Init+0x280>)
 8000e66:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6a:	0c9b      	lsrs	r3, r3, #18
 8000e6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	68ba      	ldr	r2, [r7, #8]
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	6a1b      	ldr	r3, [r3, #32]
 8000e88:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	4a6a      	ldr	r2, [pc, #424]	@ (800103c <HAL_I2C_Init+0x274>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d802      	bhi.n	8000e9c <HAL_I2C_Init+0xd4>
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	e009      	b.n	8000eb0 <HAL_I2C_Init+0xe8>
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000ea2:	fb02 f303 	mul.w	r3, r2, r3
 8000ea6:	4a69      	ldr	r2, [pc, #420]	@ (800104c <HAL_I2C_Init+0x284>)
 8000ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8000eac:	099b      	lsrs	r3, r3, #6
 8000eae:	3301      	adds	r3, #1
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	6812      	ldr	r2, [r2, #0]
 8000eb4:	430b      	orrs	r3, r1
 8000eb6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	69db      	ldr	r3, [r3, #28]
 8000ebe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8000ec2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	495c      	ldr	r1, [pc, #368]	@ (800103c <HAL_I2C_Init+0x274>)
 8000ecc:	428b      	cmp	r3, r1
 8000ece:	d819      	bhi.n	8000f04 <HAL_I2C_Init+0x13c>
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	1e59      	subs	r1, r3, #1
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ede:	1c59      	adds	r1, r3, #1
 8000ee0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8000ee4:	400b      	ands	r3, r1
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d00a      	beq.n	8000f00 <HAL_I2C_Init+0x138>
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	1e59      	subs	r1, r3, #1
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ef8:	3301      	adds	r3, #1
 8000efa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000efe:	e051      	b.n	8000fa4 <HAL_I2C_Init+0x1dc>
 8000f00:	2304      	movs	r3, #4
 8000f02:	e04f      	b.n	8000fa4 <HAL_I2C_Init+0x1dc>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d111      	bne.n	8000f30 <HAL_I2C_Init+0x168>
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	1e58      	subs	r0, r3, #1
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6859      	ldr	r1, [r3, #4]
 8000f14:	460b      	mov	r3, r1
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	440b      	add	r3, r1
 8000f1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f1e:	3301      	adds	r3, #1
 8000f20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	bf0c      	ite	eq
 8000f28:	2301      	moveq	r3, #1
 8000f2a:	2300      	movne	r3, #0
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	e012      	b.n	8000f56 <HAL_I2C_Init+0x18e>
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	1e58      	subs	r0, r3, #1
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6859      	ldr	r1, [r3, #4]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	440b      	add	r3, r1
 8000f3e:	0099      	lsls	r1, r3, #2
 8000f40:	440b      	add	r3, r1
 8000f42:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f46:	3301      	adds	r3, #1
 8000f48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	bf0c      	ite	eq
 8000f50:	2301      	moveq	r3, #1
 8000f52:	2300      	movne	r3, #0
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <HAL_I2C_Init+0x196>
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e022      	b.n	8000fa4 <HAL_I2C_Init+0x1dc>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d10e      	bne.n	8000f84 <HAL_I2C_Init+0x1bc>
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	1e58      	subs	r0, r3, #1
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6859      	ldr	r1, [r3, #4]
 8000f6e:	460b      	mov	r3, r1
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	440b      	add	r3, r1
 8000f74:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f78:	3301      	adds	r3, #1
 8000f7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f82:	e00f      	b.n	8000fa4 <HAL_I2C_Init+0x1dc>
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	1e58      	subs	r0, r3, #1
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6859      	ldr	r1, [r3, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	440b      	add	r3, r1
 8000f92:	0099      	lsls	r1, r3, #2
 8000f94:	440b      	add	r3, r1
 8000f96:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fa0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000fa4:	6879      	ldr	r1, [r7, #4]
 8000fa6:	6809      	ldr	r1, [r1, #0]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	69da      	ldr	r2, [r3, #28]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6a1b      	ldr	r3, [r3, #32]
 8000fbe:	431a      	orrs	r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	430a      	orrs	r2, r1
 8000fc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8000fd2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	6911      	ldr	r1, [r2, #16]
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	68d2      	ldr	r2, [r2, #12]
 8000fde:	4311      	orrs	r1, r2
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	6812      	ldr	r2, [r2, #0]
 8000fe4:	430b      	orrs	r3, r1
 8000fe6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	695a      	ldr	r2, [r3, #20]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	431a      	orrs	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	430a      	orrs	r2, r1
 8001002:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f042 0201 	orr.w	r2, r2, #1
 8001012:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2220      	movs	r2, #32
 800101e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2200      	movs	r2, #0
 8001026:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	000186a0 	.word	0x000186a0
 8001040:	001e847f 	.word	0x001e847f
 8001044:	003d08ff 	.word	0x003d08ff
 8001048:	431bde83 	.word	0x431bde83
 800104c:	10624dd3 	.word	0x10624dd3

08001050 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001062:	2b80      	cmp	r3, #128	@ 0x80
 8001064:	d103      	bne.n	800106e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2200      	movs	r2, #0
 800106c:	611a      	str	r2, [r3, #16]
  }
}
 800106e:	bf00      	nop
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr

08001078 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8001078:	b480      	push	{r7}
 800107a:	b087      	sub	sp, #28
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	603b      	str	r3, [r7, #0]
 8001084:	4613      	mov	r3, r2
 8001086:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800108e:	b2db      	uxtb	r3, r3
 8001090:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8001094:	2b28      	cmp	r3, #40	@ 0x28
 8001096:	d15b      	bne.n	8001150 <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d002      	beq.n	80010a4 <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 800109e:	88fb      	ldrh	r3, [r7, #6]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d101      	bne.n	80010a8 <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e054      	b.n	8001152 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d101      	bne.n	80010b6 <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 80010b2:	2302      	movs	r3, #2
 80010b4:	e04d      	b.n	8001152 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	2201      	movs	r2, #1
 80010ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d007      	beq.n	80010dc <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f042 0201 	orr.w	r2, r2, #1
 80010da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80010ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2229      	movs	r2, #41	@ 0x29
 80010f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	2220      	movs	r2, #32
 80010f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2200      	movs	r2, #0
 8001100:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	68ba      	ldr	r2, [r7, #8]
 8001106:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	88fa      	ldrh	r2, [r7, #6]
 800110c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001112:	b29a      	uxth	r2, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	683a      	ldr	r2, [r7, #0]
 800111c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	695b      	ldr	r3, [r3, #20]
 8001128:	617b      	str	r3, [r7, #20]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	617b      	str	r3, [r7, #20]
 8001132:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	2200      	movs	r2, #0
 8001138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	685a      	ldr	r2, [r3, #4]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 800114a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800114c:	2300      	movs	r3, #0
 800114e:	e000      	b.n	8001152 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8001150:	2302      	movs	r3, #2
  }
}
 8001152:	4618      	mov	r0, r3
 8001154:	371c      	adds	r7, #28
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr

0800115c <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800115c:	b480      	push	{r7}
 800115e:	b087      	sub	sp, #28
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	603b      	str	r3, [r7, #0]
 8001168:	4613      	mov	r3, r2
 800116a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001172:	b2db      	uxtb	r3, r3
 8001174:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8001178:	2b28      	cmp	r3, #40	@ 0x28
 800117a:	d15b      	bne.n	8001234 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d002      	beq.n	8001188 <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 8001182:	88fb      	ldrh	r3, [r7, #6]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d101      	bne.n	800118c <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e054      	b.n	8001236 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001192:	2b01      	cmp	r3, #1
 8001194:	d101      	bne.n	800119a <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 8001196:	2302      	movs	r3, #2
 8001198:	e04d      	b.n	8001236 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2201      	movs	r2, #1
 800119e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0301 	and.w	r3, r3, #1
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d007      	beq.n	80011c0 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f042 0201 	orr.w	r2, r2, #1
 80011be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80011ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	222a      	movs	r2, #42	@ 0x2a
 80011d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2220      	movs	r2, #32
 80011dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2200      	movs	r2, #0
 80011e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	68ba      	ldr	r2, [r7, #8]
 80011ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	88fa      	ldrh	r2, [r7, #6]
 80011f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	683a      	ldr	r2, [r7, #0]
 8001200:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	695b      	ldr	r3, [r3, #20]
 800120c:	617b      	str	r3, [r7, #20]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	617b      	str	r3, [r7, #20]
 8001216:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2200      	movs	r2, #0
 800121c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	685a      	ldr	r2, [r3, #4]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 800122e:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001230:	2300      	movs	r3, #0
 8001232:	e000      	b.n	8001236 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8001234:	2302      	movs	r3, #2
  }
}
 8001236:	4618      	mov	r0, r3
 8001238:	371c      	adds	r7, #28
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr

08001240 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800124e:	b2db      	uxtb	r3, r3
 8001250:	2b20      	cmp	r3, #32
 8001252:	d124      	bne.n	800129e <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2228      	movs	r2, #40	@ 0x28
 8001258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b01      	cmp	r3, #1
 8001268:	d007      	beq.n	800127a <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f042 0201 	orr.w	r2, r2, #1
 8001278:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001288:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	685a      	ldr	r2, [r3, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8001298:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800129a:	2300      	movs	r3, #0
 800129c:	e000      	b.n	80012a0 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800129e:	2302      	movs	r3, #2
  }
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bc80      	pop	{r7}
 80012a8:	4770      	bx	lr

080012aa <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b088      	sub	sp, #32
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012c2:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80012ca:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80012d2:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	2b10      	cmp	r3, #16
 80012d8:	d003      	beq.n	80012e2 <HAL_I2C_EV_IRQHandler+0x38>
 80012da:	7bfb      	ldrb	r3, [r7, #15]
 80012dc:	2b40      	cmp	r3, #64	@ 0x40
 80012de:	f040 80b1 	bne.w	8001444 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	695b      	ldr	r3, [r3, #20]
 80012f0:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d10d      	bne.n	8001318 <HAL_I2C_EV_IRQHandler+0x6e>
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8001302:	d003      	beq.n	800130c <HAL_I2C_EV_IRQHandler+0x62>
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800130a:	d101      	bne.n	8001310 <HAL_I2C_EV_IRQHandler+0x66>
 800130c:	2301      	movs	r3, #1
 800130e:	e000      	b.n	8001312 <HAL_I2C_EV_IRQHandler+0x68>
 8001310:	2300      	movs	r3, #0
 8001312:	2b01      	cmp	r3, #1
 8001314:	f000 8114 	beq.w	8001540 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	2b00      	cmp	r3, #0
 8001320:	d00b      	beq.n	800133a <HAL_I2C_EV_IRQHandler+0x90>
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001328:	2b00      	cmp	r3, #0
 800132a:	d006      	beq.n	800133a <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f001 fc3b 	bl	8002ba8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f000 fd3a 	bl	8001dac <I2C_Master_SB>
 8001338:	e083      	b.n	8001442 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	f003 0308 	and.w	r3, r3, #8
 8001340:	2b00      	cmp	r3, #0
 8001342:	d008      	beq.n	8001356 <HAL_I2C_EV_IRQHandler+0xac>
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f000 fdb1 	bl	8001eb6 <I2C_Master_ADD10>
 8001354:	e075      	b.n	8001442 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	f003 0302 	and.w	r3, r3, #2
 800135c:	2b00      	cmp	r3, #0
 800135e:	d008      	beq.n	8001372 <HAL_I2C_EV_IRQHandler+0xc8>
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f000 fdcc 	bl	8001f08 <I2C_Master_ADDR>
 8001370:	e067      	b.n	8001442 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	f003 0304 	and.w	r3, r3, #4
 8001378:	2b00      	cmp	r3, #0
 800137a:	d036      	beq.n	80013ea <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001386:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800138a:	f000 80db 	beq.w	8001544 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001394:	2b00      	cmp	r3, #0
 8001396:	d00d      	beq.n	80013b4 <HAL_I2C_EV_IRQHandler+0x10a>
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d008      	beq.n	80013b4 <HAL_I2C_EV_IRQHandler+0x10a>
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	f003 0304 	and.w	r3, r3, #4
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d103      	bne.n	80013b4 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f000 f9ae 	bl	800170e <I2C_MasterTransmit_TXE>
 80013b2:	e046      	b.n	8001442 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	f003 0304 	and.w	r3, r3, #4
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f000 80c2 	beq.w	8001544 <HAL_I2C_EV_IRQHandler+0x29a>
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f000 80bc 	beq.w	8001544 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80013cc:	7bbb      	ldrb	r3, [r7, #14]
 80013ce:	2b21      	cmp	r3, #33	@ 0x21
 80013d0:	d103      	bne.n	80013da <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f000 fa37 	bl	8001846 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80013d8:	e0b4      	b.n	8001544 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80013da:	7bfb      	ldrb	r3, [r7, #15]
 80013dc:	2b40      	cmp	r3, #64	@ 0x40
 80013de:	f040 80b1 	bne.w	8001544 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f000 faa5 	bl	8001932 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80013e8:	e0ac      	b.n	8001544 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80013f8:	f000 80a4 	beq.w	8001544 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001402:	2b00      	cmp	r3, #0
 8001404:	d00d      	beq.n	8001422 <HAL_I2C_EV_IRQHandler+0x178>
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800140c:	2b00      	cmp	r3, #0
 800140e:	d008      	beq.n	8001422 <HAL_I2C_EV_IRQHandler+0x178>
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f003 0304 	and.w	r3, r3, #4
 8001416:	2b00      	cmp	r3, #0
 8001418:	d103      	bne.n	8001422 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f000 fb21 	bl	8001a62 <I2C_MasterReceive_RXNE>
 8001420:	e00f      	b.n	8001442 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	f003 0304 	and.w	r3, r3, #4
 8001428:	2b00      	cmp	r3, #0
 800142a:	f000 808b 	beq.w	8001544 <HAL_I2C_EV_IRQHandler+0x29a>
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001434:	2b00      	cmp	r3, #0
 8001436:	f000 8085 	beq.w	8001544 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f000 fbcc 	bl	8001bd8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001440:	e080      	b.n	8001544 <HAL_I2C_EV_IRQHandler+0x29a>
 8001442:	e07f      	b.n	8001544 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001448:	2b00      	cmp	r3, #0
 800144a:	d004      	beq.n	8001456 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	61fb      	str	r3, [r7, #28]
 8001454:	e007      	b.n	8001466 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	695b      	ldr	r3, [r3, #20]
 8001464:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d011      	beq.n	8001494 <HAL_I2C_EV_IRQHandler+0x1ea>
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001476:	2b00      	cmp	r3, #0
 8001478:	d00c      	beq.n	8001494 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147e:	2b00      	cmp	r3, #0
 8001480:	d003      	beq.n	800148a <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800148a:	69b9      	ldr	r1, [r7, #24]
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f000 ff92 	bl	80023b6 <I2C_Slave_ADDR>
 8001492:	e05a      	b.n	800154a <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	f003 0310 	and.w	r3, r3, #16
 800149a:	2b00      	cmp	r3, #0
 800149c:	d008      	beq.n	80014b0 <HAL_I2C_EV_IRQHandler+0x206>
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d003      	beq.n	80014b0 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f000 ffcd 	bl	8002448 <I2C_Slave_STOPF>
 80014ae:	e04c      	b.n	800154a <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80014b0:	7bbb      	ldrb	r3, [r7, #14]
 80014b2:	2b21      	cmp	r3, #33	@ 0x21
 80014b4:	d002      	beq.n	80014bc <HAL_I2C_EV_IRQHandler+0x212>
 80014b6:	7bbb      	ldrb	r3, [r7, #14]
 80014b8:	2b29      	cmp	r3, #41	@ 0x29
 80014ba:	d120      	bne.n	80014fe <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d00d      	beq.n	80014e2 <HAL_I2C_EV_IRQHandler+0x238>
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d008      	beq.n	80014e2 <HAL_I2C_EV_IRQHandler+0x238>
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	f003 0304 	and.w	r3, r3, #4
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d103      	bne.n	80014e2 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f000 feaf 	bl	800223e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80014e0:	e032      	b.n	8001548 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d02d      	beq.n	8001548 <HAL_I2C_EV_IRQHandler+0x29e>
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d028      	beq.n	8001548 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f000 fede 	bl	80022b8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80014fc:	e024      	b.n	8001548 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001504:	2b00      	cmp	r3, #0
 8001506:	d00d      	beq.n	8001524 <HAL_I2C_EV_IRQHandler+0x27a>
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800150e:	2b00      	cmp	r3, #0
 8001510:	d008      	beq.n	8001524 <HAL_I2C_EV_IRQHandler+0x27a>
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	2b00      	cmp	r3, #0
 800151a:	d103      	bne.n	8001524 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f000 feeb 	bl	80022f8 <I2C_SlaveReceive_RXNE>
 8001522:	e012      	b.n	800154a <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	f003 0304 	and.w	r3, r3, #4
 800152a:	2b00      	cmp	r3, #0
 800152c:	d00d      	beq.n	800154a <HAL_I2C_EV_IRQHandler+0x2a0>
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001534:	2b00      	cmp	r3, #0
 8001536:	d008      	beq.n	800154a <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f000 ff1b 	bl	8002374 <I2C_SlaveReceive_BTF>
 800153e:	e004      	b.n	800154a <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8001540:	bf00      	nop
 8001542:	e002      	b.n	800154a <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001544:	bf00      	nop
 8001546:	e000      	b.n	800154a <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001548:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800154a:	3720      	adds	r7, #32
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08a      	sub	sp, #40	@ 0x28
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	695b      	ldr	r3, [r3, #20]
 800155e:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001568:	2300      	movs	r3, #0
 800156a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001572:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001574:	6a3b      	ldr	r3, [r7, #32]
 8001576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800157a:	2b00      	cmp	r3, #0
 800157c:	d015      	beq.n	80015aa <HAL_I2C_ER_IRQHandler+0x5a>
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001584:	2b00      	cmp	r3, #0
 8001586:	d010      	beq.n	80015aa <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001598:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80015a8:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80015aa:	6a3b      	ldr	r3, [r7, #32]
 80015ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d00d      	beq.n	80015d0 <HAL_I2C_ER_IRQHandler+0x80>
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d008      	beq.n	80015d0 <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80015be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c0:	f043 0302 	orr.w	r3, r3, #2
 80015c4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80015ce:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80015d0:	6a3b      	ldr	r3, [r7, #32]
 80015d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d03e      	beq.n	8001658 <HAL_I2C_ER_IRQHandler+0x108>
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d039      	beq.n	8001658 <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 80015e4:	7efb      	ldrb	r3, [r7, #27]
 80015e6:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80015f6:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fc:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80015fe:	7ebb      	ldrb	r3, [r7, #26]
 8001600:	2b20      	cmp	r3, #32
 8001602:	d112      	bne.n	800162a <HAL_I2C_ER_IRQHandler+0xda>
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d10f      	bne.n	800162a <HAL_I2C_ER_IRQHandler+0xda>
 800160a:	7cfb      	ldrb	r3, [r7, #19]
 800160c:	2b21      	cmp	r3, #33	@ 0x21
 800160e:	d008      	beq.n	8001622 <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001610:	7cfb      	ldrb	r3, [r7, #19]
 8001612:	2b29      	cmp	r3, #41	@ 0x29
 8001614:	d005      	beq.n	8001622 <HAL_I2C_ER_IRQHandler+0xd2>
 8001616:	7cfb      	ldrb	r3, [r7, #19]
 8001618:	2b28      	cmp	r3, #40	@ 0x28
 800161a:	d106      	bne.n	800162a <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2b21      	cmp	r3, #33	@ 0x21
 8001620:	d103      	bne.n	800162a <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f001 f840 	bl	80026a8 <I2C_Slave_AF>
 8001628:	e016      	b.n	8001658 <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001632:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001636:	f043 0304 	orr.w	r3, r3, #4
 800163a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800163c:	7efb      	ldrb	r3, [r7, #27]
 800163e:	2b10      	cmp	r3, #16
 8001640:	d002      	beq.n	8001648 <HAL_I2C_ER_IRQHandler+0xf8>
 8001642:	7efb      	ldrb	r3, [r7, #27]
 8001644:	2b40      	cmp	r3, #64	@ 0x40
 8001646:	d107      	bne.n	8001658 <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001656:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001658:	6a3b      	ldr	r3, [r7, #32]
 800165a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800165e:	2b00      	cmp	r3, #0
 8001660:	d00d      	beq.n	800167e <HAL_I2C_ER_IRQHandler+0x12e>
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001668:	2b00      	cmp	r3, #0
 800166a:	d008      	beq.n	800167e <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800166c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800166e:	f043 0308 	orr.w	r3, r3, #8
 8001672:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800167c:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800167e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001680:	2b00      	cmp	r3, #0
 8001682:	d008      	beq.n	8001696 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168a:	431a      	orrs	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f001 f87d 	bl	8002790 <I2C_ITError>
  }
}
 8001696:	bf00      	nop
 8001698:	3728      	adds	r7, #40	@ 0x28
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr

080016b0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr

080016c2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr

080016d4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc80      	pop	{r7}
 80016e4:	4770      	bx	lr

080016e6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b083      	sub	sp, #12
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr

080016f8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001704:	4618      	mov	r0, r3
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	bc80      	pop	{r7}
 800170c:	4770      	bx	lr

0800170e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b084      	sub	sp, #16
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800171c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001724:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800172a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001730:	2b00      	cmp	r3, #0
 8001732:	d150      	bne.n	80017d6 <I2C_MasterTransmit_TXE+0xc8>
 8001734:	7bfb      	ldrb	r3, [r7, #15]
 8001736:	2b21      	cmp	r3, #33	@ 0x21
 8001738:	d14d      	bne.n	80017d6 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	2b08      	cmp	r3, #8
 800173e:	d01d      	beq.n	800177c <I2C_MasterTransmit_TXE+0x6e>
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	2b20      	cmp	r3, #32
 8001744:	d01a      	beq.n	800177c <I2C_MasterTransmit_TXE+0x6e>
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800174c:	d016      	beq.n	800177c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	685a      	ldr	r2, [r3, #4]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800175c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2211      	movs	r2, #17
 8001762:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2220      	movs	r2, #32
 8001770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff ff92 	bl	800169e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800177a:	e060      	b.n	800183e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	685a      	ldr	r2, [r3, #4]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800178a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800179a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2220      	movs	r2, #32
 80017a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	2b40      	cmp	r3, #64	@ 0x40
 80017b4:	d107      	bne.n	80017c6 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff ff7f 	bl	80016c2 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80017c4:	e03b      	b.n	800183e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f7ff ff65 	bl	800169e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80017d4:	e033      	b.n	800183e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80017d6:	7bfb      	ldrb	r3, [r7, #15]
 80017d8:	2b21      	cmp	r3, #33	@ 0x21
 80017da:	d005      	beq.n	80017e8 <I2C_MasterTransmit_TXE+0xda>
 80017dc:	7bbb      	ldrb	r3, [r7, #14]
 80017de:	2b40      	cmp	r3, #64	@ 0x40
 80017e0:	d12d      	bne.n	800183e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
 80017e4:	2b22      	cmp	r3, #34	@ 0x22
 80017e6:	d12a      	bne.n	800183e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d108      	bne.n	8001804 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001800:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001802:	e01c      	b.n	800183e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800180a:	b2db      	uxtb	r3, r3
 800180c:	2b40      	cmp	r3, #64	@ 0x40
 800180e:	d103      	bne.n	8001818 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f000 f88e 	bl	8001932 <I2C_MemoryTransmit_TXE_BTF>
}
 8001816:	e012      	b.n	800183e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800181c:	781a      	ldrb	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001828:	1c5a      	adds	r2, r3, #1
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001832:	b29b      	uxth	r3, r3
 8001834:	3b01      	subs	r3, #1
 8001836:	b29a      	uxth	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800183c:	e7ff      	b.n	800183e <I2C_MasterTransmit_TXE+0x130>
 800183e:	bf00      	nop
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b084      	sub	sp, #16
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001852:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800185a:	b2db      	uxtb	r3, r3
 800185c:	2b21      	cmp	r3, #33	@ 0x21
 800185e:	d164      	bne.n	800192a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001864:	b29b      	uxth	r3, r3
 8001866:	2b00      	cmp	r3, #0
 8001868:	d012      	beq.n	8001890 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800186e:	781a      	ldrb	r2, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187a:	1c5a      	adds	r2, r3, #1
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001884:	b29b      	uxth	r3, r3
 8001886:	3b01      	subs	r3, #1
 8001888:	b29a      	uxth	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800188e:	e04c      	b.n	800192a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2b08      	cmp	r3, #8
 8001894:	d01d      	beq.n	80018d2 <I2C_MasterTransmit_BTF+0x8c>
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2b20      	cmp	r3, #32
 800189a:	d01a      	beq.n	80018d2 <I2C_MasterTransmit_BTF+0x8c>
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80018a2:	d016      	beq.n	80018d2 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	685a      	ldr	r2, [r3, #4]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80018b2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2211      	movs	r2, #17
 80018b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2220      	movs	r2, #32
 80018c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f7ff fee7 	bl	800169e <HAL_I2C_MasterTxCpltCallback>
}
 80018d0:	e02b      	b.n	800192a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	685a      	ldr	r2, [r3, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80018e0:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018f0:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2220      	movs	r2, #32
 80018fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001906:	b2db      	uxtb	r3, r3
 8001908:	2b40      	cmp	r3, #64	@ 0x40
 800190a:	d107      	bne.n	800191c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7ff fed4 	bl	80016c2 <HAL_I2C_MemTxCpltCallback>
}
 800191a:	e006      	b.n	800192a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f7ff feba 	bl	800169e <HAL_I2C_MasterTxCpltCallback>
}
 800192a:	bf00      	nop
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b084      	sub	sp, #16
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001940:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001946:	2b00      	cmp	r3, #0
 8001948:	d11d      	bne.n	8001986 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800194e:	2b01      	cmp	r3, #1
 8001950:	d10b      	bne.n	800196a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001956:	b2da      	uxtb	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001962:	1c9a      	adds	r2, r3, #2
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8001968:	e077      	b.n	8001a5a <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800196e:	b29b      	uxth	r3, r3
 8001970:	121b      	asrs	r3, r3, #8
 8001972:	b2da      	uxtb	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800197e:	1c5a      	adds	r2, r3, #1
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001984:	e069      	b.n	8001a5a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800198a:	2b01      	cmp	r3, #1
 800198c:	d10b      	bne.n	80019a6 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001992:	b2da      	uxtb	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800199e:	1c5a      	adds	r2, r3, #1
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80019a4:	e059      	b.n	8001a5a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d152      	bne.n	8001a54 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80019ae:	7bfb      	ldrb	r3, [r7, #15]
 80019b0:	2b22      	cmp	r3, #34	@ 0x22
 80019b2:	d10d      	bne.n	80019d0 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80019c2:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019c8:	1c5a      	adds	r2, r3, #1
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80019ce:	e044      	b.n	8001a5a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d015      	beq.n	8001a06 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80019da:	7bfb      	ldrb	r3, [r7, #15]
 80019dc:	2b21      	cmp	r3, #33	@ 0x21
 80019de:	d112      	bne.n	8001a06 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e4:	781a      	ldrb	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f0:	1c5a      	adds	r2, r3, #1
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	3b01      	subs	r3, #1
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001a04:	e029      	b.n	8001a5a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d124      	bne.n	8001a5a <I2C_MemoryTransmit_TXE_BTF+0x128>
 8001a10:	7bfb      	ldrb	r3, [r7, #15]
 8001a12:	2b21      	cmp	r3, #33	@ 0x21
 8001a14:	d121      	bne.n	8001a5a <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	685a      	ldr	r2, [r3, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001a24:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a34:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2220      	movs	r2, #32
 8001a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff fe38 	bl	80016c2 <HAL_I2C_MemTxCpltCallback>
}
 8001a52:	e002      	b.n	8001a5a <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f7ff fafb 	bl	8001050 <I2C_Flush_DR>
}
 8001a5a:	bf00      	nop
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b084      	sub	sp, #16
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b22      	cmp	r3, #34	@ 0x22
 8001a74:	f040 80ac 	bne.w	8001bd0 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2b03      	cmp	r3, #3
 8001a84:	d921      	bls.n	8001aca <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	691a      	ldr	r2, [r3, #16]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a90:	b2d2      	uxtb	r2, r2
 8001a92:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a98:	1c5a      	adds	r2, r3, #1
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	2b03      	cmp	r3, #3
 8001ab4:	f040 808c 	bne.w	8001bd0 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	685a      	ldr	r2, [r3, #4]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ac6:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8001ac8:	e082      	b.n	8001bd0 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d075      	beq.n	8001bbe <I2C_MasterReceive_RXNE+0x15c>
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d002      	beq.n	8001ade <I2C_MasterReceive_RXNE+0x7c>
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d16f      	bne.n	8001bbe <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f001 f830 	bl	8002b44 <I2C_WaitOnSTOPRequestThroughIT>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d142      	bne.n	8001b70 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001af8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001b08:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	691a      	ldr	r2, [r3, #16]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b14:	b2d2      	uxtb	r2, r2
 8001b16:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b1c:	1c5a      	adds	r2, r3, #1
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2220      	movs	r2, #32
 8001b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b40      	cmp	r3, #64	@ 0x40
 8001b42:	d10a      	bne.n	8001b5a <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff fdbe 	bl	80016d4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001b58:	e03a      	b.n	8001bd0 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2212      	movs	r2, #18
 8001b66:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7ff fda1 	bl	80016b0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001b6e:	e02f      	b.n	8001bd0 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	685a      	ldr	r2, [r3, #4]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001b7e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	691a      	ldr	r2, [r3, #16]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b8a:	b2d2      	uxtb	r2, r2
 8001b8c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b92:	1c5a      	adds	r2, r3, #1
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2220      	movs	r2, #32
 8001baa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7fe fb58 	bl	800026c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001bbc:	e008      	b.n	8001bd0 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001bcc:	605a      	str	r2, [r3, #4]
}
 8001bce:	e7ff      	b.n	8001bd0 <I2C_MasterReceive_RXNE+0x16e>
 8001bd0:	bf00      	nop
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001be4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	2b04      	cmp	r3, #4
 8001bee:	d11b      	bne.n	8001c28 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	685a      	ldr	r2, [r3, #4]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001bfe:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	691a      	ldr	r2, [r3, #16]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c0a:	b2d2      	uxtb	r2, r2
 8001c0c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c12:	1c5a      	adds	r2, r3, #1
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8001c26:	e0bd      	b.n	8001da4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	2b03      	cmp	r3, #3
 8001c30:	d129      	bne.n	8001c86 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	685a      	ldr	r2, [r3, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c40:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2b04      	cmp	r3, #4
 8001c46:	d00a      	beq.n	8001c5e <I2C_MasterReceive_BTF+0x86>
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d007      	beq.n	8001c5e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c5c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	691a      	ldr	r2, [r3, #16]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c70:	1c5a      	adds	r2, r3, #1
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001c84:	e08e      	b.n	8001da4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d176      	bne.n	8001d7e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d002      	beq.n	8001c9c <I2C_MasterReceive_BTF+0xc4>
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2b10      	cmp	r3, #16
 8001c9a:	d108      	bne.n	8001cae <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	e019      	b.n	8001ce2 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d002      	beq.n	8001cba <I2C_MasterReceive_BTF+0xe2>
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d108      	bne.n	8001ccc <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	e00a      	b.n	8001ce2 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2b10      	cmp	r3, #16
 8001cd0:	d007      	beq.n	8001ce2 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ce0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	691a      	ldr	r2, [r3, #16]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cec:	b2d2      	uxtb	r2, r2
 8001cee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf4:	1c5a      	adds	r2, r3, #1
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	3b01      	subs	r3, #1
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	691a      	ldr	r2, [r3, #16]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d1a:	1c5a      	adds	r2, r3, #1
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	3b01      	subs	r3, #1
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	685a      	ldr	r2, [r3, #4]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8001d3c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2220      	movs	r2, #32
 8001d42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b40      	cmp	r3, #64	@ 0x40
 8001d50:	d10a      	bne.n	8001d68 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f7ff fcb7 	bl	80016d4 <HAL_I2C_MemRxCpltCallback>
}
 8001d66:	e01d      	b.n	8001da4 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2212      	movs	r2, #18
 8001d74:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7ff fc9a 	bl	80016b0 <HAL_I2C_MasterRxCpltCallback>
}
 8001d7c:	e012      	b.n	8001da4 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	691a      	ldr	r2, [r3, #16]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d88:	b2d2      	uxtb	r2, r2
 8001d8a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d90:	1c5a      	adds	r2, r3, #1
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001da4:	bf00      	nop
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	2b40      	cmp	r3, #64	@ 0x40
 8001dbe:	d117      	bne.n	8001df0 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d109      	bne.n	8001ddc <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	461a      	mov	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001dd8:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8001dda:	e067      	b.n	8001eac <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	611a      	str	r2, [r3, #16]
}
 8001dee:	e05d      	b.n	8001eac <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001df8:	d133      	bne.n	8001e62 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b21      	cmp	r3, #33	@ 0x21
 8001e04:	d109      	bne.n	8001e1a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001e16:	611a      	str	r2, [r3, #16]
 8001e18:	e008      	b.n	8001e2c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d004      	beq.n	8001e3e <I2C_Master_SB+0x92>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d108      	bne.n	8001e50 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d032      	beq.n	8001eac <I2C_Master_SB+0x100>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d02d      	beq.n	8001eac <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e5e:	605a      	str	r2, [r3, #4]
}
 8001e60:	e024      	b.n	8001eac <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d10e      	bne.n	8001e88 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	11db      	asrs	r3, r3, #7
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	f003 0306 	and.w	r3, r3, #6
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	f063 030f 	orn	r3, r3, #15
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	611a      	str	r2, [r3, #16]
}
 8001e86:	e011      	b.n	8001eac <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d10d      	bne.n	8001eac <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	11db      	asrs	r3, r3, #7
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	f003 0306 	and.w	r3, r3, #6
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	f063 030e 	orn	r3, r3, #14
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	611a      	str	r2, [r3, #16]
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bc80      	pop	{r7}
 8001eb4:	4770      	bx	lr

08001eb6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b083      	sub	sp, #12
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d004      	beq.n	8001edc <I2C_Master_ADD10+0x26>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d108      	bne.n	8001eee <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d00c      	beq.n	8001efe <I2C_Master_ADD10+0x48>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d007      	beq.n	8001efe <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001efc:	605a      	str	r2, [r3, #4]
  }
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bc80      	pop	{r7}
 8001f06:	4770      	bx	lr

08001f08 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b091      	sub	sp, #68	@ 0x44
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001f16:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f24:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b22      	cmp	r3, #34	@ 0x22
 8001f30:	f040 8174 	bne.w	800221c <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d10f      	bne.n	8001f5c <I2C_Master_ADDR+0x54>
 8001f3c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001f40:	2b40      	cmp	r3, #64	@ 0x40
 8001f42:	d10b      	bne.n	8001f5c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f44:	2300      	movs	r3, #0
 8001f46:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f5a:	e16b      	b.n	8002234 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d11d      	bne.n	8001fa0 <I2C_Master_ADDR+0x98>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8001f6c:	d118      	bne.n	8001fa0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f6e:	2300      	movs	r3, #0
 8001f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	695b      	ldr	r3, [r3, #20]
 8001f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f92:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f98:	1c5a      	adds	r2, r3, #1
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	651a      	str	r2, [r3, #80]	@ 0x50
 8001f9e:	e149      	b.n	8002234 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d113      	bne.n	8001fd2 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001faa:	2300      	movs	r3, #0
 8001fac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	695b      	ldr	r3, [r3, #20]
 8001fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	e120      	b.n	8002214 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	f040 808a 	bne.w	80020f2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8001fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fe0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001fe4:	d137      	bne.n	8002056 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ff4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002000:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002004:	d113      	bne.n	800202e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002014:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002016:	2300      	movs	r3, #0
 8002018:	627b      	str	r3, [r7, #36]	@ 0x24
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	695b      	ldr	r3, [r3, #20]
 8002020:	627b      	str	r3, [r7, #36]	@ 0x24
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	627b      	str	r3, [r7, #36]	@ 0x24
 800202a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202c:	e0f2      	b.n	8002214 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800202e:	2300      	movs	r3, #0
 8002030:	623b      	str	r3, [r7, #32]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	695b      	ldr	r3, [r3, #20]
 8002038:	623b      	str	r3, [r7, #32]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	623b      	str	r3, [r7, #32]
 8002042:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	e0de      	b.n	8002214 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002058:	2b08      	cmp	r3, #8
 800205a:	d02e      	beq.n	80020ba <I2C_Master_ADDR+0x1b2>
 800205c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800205e:	2b20      	cmp	r3, #32
 8002060:	d02b      	beq.n	80020ba <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002062:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002064:	2b12      	cmp	r3, #18
 8002066:	d102      	bne.n	800206e <I2C_Master_ADDR+0x166>
 8002068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800206a:	2b01      	cmp	r3, #1
 800206c:	d125      	bne.n	80020ba <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800206e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002070:	2b04      	cmp	r3, #4
 8002072:	d00e      	beq.n	8002092 <I2C_Master_ADDR+0x18a>
 8002074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002076:	2b02      	cmp	r3, #2
 8002078:	d00b      	beq.n	8002092 <I2C_Master_ADDR+0x18a>
 800207a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800207c:	2b10      	cmp	r3, #16
 800207e:	d008      	beq.n	8002092 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	e007      	b.n	80020a2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80020a0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020a2:	2300      	movs	r3, #0
 80020a4:	61fb      	str	r3, [r7, #28]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	695b      	ldr	r3, [r3, #20]
 80020ac:	61fb      	str	r3, [r7, #28]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	61fb      	str	r3, [r7, #28]
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	e0ac      	b.n	8002214 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020c8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ca:	2300      	movs	r3, #0
 80020cc:	61bb      	str	r3, [r7, #24]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	695b      	ldr	r3, [r3, #20]
 80020d4:	61bb      	str	r3, [r7, #24]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	61bb      	str	r3, [r7, #24]
 80020de:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	e090      	b.n	8002214 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d158      	bne.n	80021ae <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80020fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020fe:	2b04      	cmp	r3, #4
 8002100:	d021      	beq.n	8002146 <I2C_Master_ADDR+0x23e>
 8002102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002104:	2b02      	cmp	r3, #2
 8002106:	d01e      	beq.n	8002146 <I2C_Master_ADDR+0x23e>
 8002108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800210a:	2b10      	cmp	r3, #16
 800210c:	d01b      	beq.n	8002146 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800211c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	695b      	ldr	r3, [r3, #20]
 8002128:	617b      	str	r3, [r7, #20]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	617b      	str	r3, [r7, #20]
 8002132:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	e012      	b.n	800216c <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002154:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002156:	2300      	movs	r3, #0
 8002158:	613b      	str	r3, [r7, #16]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	613b      	str	r3, [r7, #16]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	613b      	str	r3, [r7, #16]
 800216a:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002176:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800217a:	d14b      	bne.n	8002214 <I2C_Master_ADDR+0x30c>
 800217c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800217e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002182:	d00b      	beq.n	800219c <I2C_Master_ADDR+0x294>
 8002184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002186:	2b01      	cmp	r3, #1
 8002188:	d008      	beq.n	800219c <I2C_Master_ADDR+0x294>
 800218a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800218c:	2b08      	cmp	r3, #8
 800218e:	d005      	beq.n	800219c <I2C_Master_ADDR+0x294>
 8002190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002192:	2b10      	cmp	r3, #16
 8002194:	d002      	beq.n	800219c <I2C_Master_ADDR+0x294>
 8002196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002198:	2b20      	cmp	r3, #32
 800219a:	d13b      	bne.n	8002214 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80021aa:	605a      	str	r2, [r3, #4]
 80021ac:	e032      	b.n	8002214 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80021bc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80021cc:	d117      	bne.n	80021fe <I2C_Master_ADDR+0x2f6>
 80021ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021d0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80021d4:	d00b      	beq.n	80021ee <I2C_Master_ADDR+0x2e6>
 80021d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d008      	beq.n	80021ee <I2C_Master_ADDR+0x2e6>
 80021dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021de:	2b08      	cmp	r3, #8
 80021e0:	d005      	beq.n	80021ee <I2C_Master_ADDR+0x2e6>
 80021e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021e4:	2b10      	cmp	r3, #16
 80021e6:	d002      	beq.n	80021ee <I2C_Master_ADDR+0x2e6>
 80021e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021ea:	2b20      	cmp	r3, #32
 80021ec:	d107      	bne.n	80021fe <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80021fc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021fe:	2300      	movs	r3, #0
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800221a:	e00b      	b.n	8002234 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800221c:	2300      	movs	r3, #0
 800221e:	60bb      	str	r3, [r7, #8]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	60bb      	str	r3, [r7, #8]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	60bb      	str	r3, [r7, #8]
 8002230:	68bb      	ldr	r3, [r7, #8]
}
 8002232:	e7ff      	b.n	8002234 <I2C_Master_ADDR+0x32c>
 8002234:	bf00      	nop
 8002236:	3744      	adds	r7, #68	@ 0x44
 8002238:	46bd      	mov	sp, r7
 800223a:	bc80      	pop	{r7}
 800223c:	4770      	bx	lr

0800223e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b084      	sub	sp, #16
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800224c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002252:	b29b      	uxth	r3, r3
 8002254:	2b00      	cmp	r3, #0
 8002256:	d02b      	beq.n	80022b0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225c:	781a      	ldrb	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002268:	1c5a      	adds	r2, r3, #1
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002272:	b29b      	uxth	r3, r3
 8002274:	3b01      	subs	r3, #1
 8002276:	b29a      	uxth	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002280:	b29b      	uxth	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d114      	bne.n	80022b0 <I2C_SlaveTransmit_TXE+0x72>
 8002286:	7bfb      	ldrb	r3, [r7, #15]
 8002288:	2b29      	cmp	r3, #41	@ 0x29
 800228a:	d111      	bne.n	80022b0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	685a      	ldr	r2, [r3, #4]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800229a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2221      	movs	r2, #33	@ 0x21
 80022a0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2228      	movs	r2, #40	@ 0x28
 80022a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7fd ffc2 	bl	8000234 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80022b0:	bf00      	nop
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d011      	beq.n	80022ee <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ce:	781a      	ldrb	r2, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022da:	1c5a      	adds	r2, r3, #1
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	3b01      	subs	r3, #1
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc80      	pop	{r7}
 80022f6:	4770      	bx	lr

080022f8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002306:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800230c:	b29b      	uxth	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d02c      	beq.n	800236c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	691a      	ldr	r2, [r3, #16]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002324:	1c5a      	adds	r2, r3, #1
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800232e:	b29b      	uxth	r3, r3
 8002330:	3b01      	subs	r3, #1
 8002332:	b29a      	uxth	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800233c:	b29b      	uxth	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d114      	bne.n	800236c <I2C_SlaveReceive_RXNE+0x74>
 8002342:	7bfb      	ldrb	r3, [r7, #15]
 8002344:	2b2a      	cmp	r3, #42	@ 0x2a
 8002346:	d111      	bne.n	800236c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	685a      	ldr	r2, [r3, #4]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002356:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2222      	movs	r2, #34	@ 0x22
 800235c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2228      	movs	r2, #40	@ 0x28
 8002362:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7fd ff2e 	bl	80001c8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800236c:	bf00      	nop
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002380:	b29b      	uxth	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d012      	beq.n	80023ac <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	691a      	ldr	r2, [r3, #16]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002398:	1c5a      	adds	r2, r3, #1
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	3b01      	subs	r3, #1
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bc80      	pop	{r7}
 80023b4:	4770      	bx	lr

080023b6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b084      	sub	sp, #16
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
 80023be:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80023c0:	2300      	movs	r3, #0
 80023c2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80023d0:	2b28      	cmp	r3, #40	@ 0x28
 80023d2:	d125      	bne.n	8002420 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	685a      	ldr	r2, [r3, #4]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023e2:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	f003 0304 	and.w	r3, r3, #4
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80023ee:	2301      	movs	r3, #1
 80023f0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d103      	bne.n	8002404 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	81bb      	strh	r3, [r7, #12]
 8002402:	e002      	b.n	800240a <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002412:	89ba      	ldrh	r2, [r7, #12]
 8002414:	7bfb      	ldrb	r3, [r7, #15]
 8002416:	4619      	mov	r1, r3
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7fd fea3 	bl	8000164 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800241e:	e00e      	b.n	800243e <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002420:	2300      	movs	r3, #0
 8002422:	60bb      	str	r3, [r7, #8]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	60bb      	str	r3, [r7, #8]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	60bb      	str	r3, [r7, #8]
 8002434:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800243e:	bf00      	nop
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
	...

08002448 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002456:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002466:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002468:	2300      	movs	r3, #0
 800246a:	60bb      	str	r3, [r7, #8]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	60bb      	str	r3, [r7, #8]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f042 0201 	orr.w	r2, r2, #1
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002494:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80024a4:	d172      	bne.n	800258c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80024a6:	7bfb      	ldrb	r3, [r7, #15]
 80024a8:	2b22      	cmp	r3, #34	@ 0x22
 80024aa:	d002      	beq.n	80024b2 <I2C_Slave_STOPF+0x6a>
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
 80024ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80024b0:	d135      	bne.n	800251e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d005      	beq.n	80024d6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ce:	f043 0204 	orr.w	r2, r3, #4
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024e4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fe fac2 	bl	8000a74 <HAL_DMA_GetState>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d049      	beq.n	800258a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024fa:	4a69      	ldr	r2, [pc, #420]	@ (80026a0 <I2C_Slave_STOPF+0x258>)
 80024fc:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002502:	4618      	mov	r0, r3
 8002504:	f7fe fa3e 	bl	8000984 <HAL_DMA_Abort_IT>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d03d      	beq.n	800258a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002512:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002518:	4610      	mov	r0, r2
 800251a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800251c:	e035      	b.n	800258a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	b29a      	uxth	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002530:	b29b      	uxth	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d005      	beq.n	8002542 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253a:	f043 0204 	orr.w	r2, r3, #4
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002550:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002556:	4618      	mov	r0, r3
 8002558:	f7fe fa8c 	bl	8000a74 <HAL_DMA_GetState>
 800255c:	4603      	mov	r3, r0
 800255e:	2b01      	cmp	r3, #1
 8002560:	d014      	beq.n	800258c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002566:	4a4e      	ldr	r2, [pc, #312]	@ (80026a0 <I2C_Slave_STOPF+0x258>)
 8002568:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800256e:	4618      	mov	r0, r3
 8002570:	f7fe fa08 	bl	8000984 <HAL_DMA_Abort_IT>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d008      	beq.n	800258c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800257e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002584:	4610      	mov	r0, r2
 8002586:	4798      	blx	r3
 8002588:	e000      	b.n	800258c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800258a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002590:	b29b      	uxth	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d03e      	beq.n	8002614 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	f003 0304 	and.w	r3, r3, #4
 80025a0:	2b04      	cmp	r3, #4
 80025a2:	d112      	bne.n	80025ca <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	691a      	ldr	r2, [r3, #16]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ae:	b2d2      	uxtb	r2, r2
 80025b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b6:	1c5a      	adds	r2, r3, #1
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	3b01      	subs	r3, #1
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025d4:	2b40      	cmp	r3, #64	@ 0x40
 80025d6:	d112      	bne.n	80025fe <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	691a      	ldr	r2, [r3, #16]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ea:	1c5a      	adds	r2, r3, #1
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	3b01      	subs	r3, #1
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002602:	b29b      	uxth	r3, r3
 8002604:	2b00      	cmp	r3, #0
 8002606:	d005      	beq.n	8002614 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260c:	f043 0204 	orr.w	r2, r3, #4
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002618:	2b00      	cmp	r3, #0
 800261a:	d003      	beq.n	8002624 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 f8b7 	bl	8002790 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002622:	e039      	b.n	8002698 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002624:	7bfb      	ldrb	r3, [r7, #15]
 8002626:	2b2a      	cmp	r3, #42	@ 0x2a
 8002628:	d109      	bne.n	800263e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2228      	movs	r2, #40	@ 0x28
 8002634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f7fd fdc5 	bl	80001c8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b28      	cmp	r3, #40	@ 0x28
 8002648:	d111      	bne.n	800266e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a15      	ldr	r2, [pc, #84]	@ (80026a4 <I2C_Slave_STOPF+0x25c>)
 800264e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2220      	movs	r2, #32
 800265a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7fd fd70 	bl	800014c <HAL_I2C_ListenCpltCallback>
}
 800266c:	e014      	b.n	8002698 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002672:	2b22      	cmp	r3, #34	@ 0x22
 8002674:	d002      	beq.n	800267c <I2C_Slave_STOPF+0x234>
 8002676:	7bfb      	ldrb	r3, [r7, #15]
 8002678:	2b22      	cmp	r3, #34	@ 0x22
 800267a:	d10d      	bne.n	8002698 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2220      	movs	r2, #32
 8002686:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7fd fd98 	bl	80001c8 <HAL_I2C_SlaveRxCpltCallback>
}
 8002698:	bf00      	nop
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	080029f5 	.word	0x080029f5
 80026a4:	ffff0000 	.word	0xffff0000

080026a8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026b6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026bc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d002      	beq.n	80026ca <I2C_Slave_AF+0x22>
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	2b20      	cmp	r3, #32
 80026c8:	d129      	bne.n	800271e <I2C_Slave_AF+0x76>
 80026ca:	7bfb      	ldrb	r3, [r7, #15]
 80026cc:	2b28      	cmp	r3, #40	@ 0x28
 80026ce:	d126      	bne.n	800271e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a2e      	ldr	r2, [pc, #184]	@ (800278c <I2C_Slave_AF+0xe4>)
 80026d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80026e4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80026ee:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026fe:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2220      	movs	r2, #32
 800270a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7fd fd18 	bl	800014c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800271c:	e031      	b.n	8002782 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800271e:	7bfb      	ldrb	r3, [r7, #15]
 8002720:	2b21      	cmp	r3, #33	@ 0x21
 8002722:	d129      	bne.n	8002778 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a19      	ldr	r2, [pc, #100]	@ (800278c <I2C_Slave_AF+0xe4>)
 8002728:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2221      	movs	r2, #33	@ 0x21
 800272e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2220      	movs	r2, #32
 8002734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800274e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002758:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002768:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7fe fc70 	bl	8001050 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f7fd fd5f 	bl	8000234 <HAL_I2C_SlaveTxCpltCallback>
}
 8002776:	e004      	b.n	8002782 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002780:	615a      	str	r2, [r3, #20]
}
 8002782:	bf00      	nop
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	ffff0000 	.word	0xffff0000

08002790 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800279e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80027a6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80027a8:	7bbb      	ldrb	r3, [r7, #14]
 80027aa:	2b10      	cmp	r3, #16
 80027ac:	d002      	beq.n	80027b4 <I2C_ITError+0x24>
 80027ae:	7bbb      	ldrb	r3, [r7, #14]
 80027b0:	2b40      	cmp	r3, #64	@ 0x40
 80027b2:	d10a      	bne.n	80027ca <I2C_ITError+0x3a>
 80027b4:	7bfb      	ldrb	r3, [r7, #15]
 80027b6:	2b22      	cmp	r3, #34	@ 0x22
 80027b8:	d107      	bne.n	80027ca <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027c8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80027ca:	7bfb      	ldrb	r3, [r7, #15]
 80027cc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80027d0:	2b28      	cmp	r3, #40	@ 0x28
 80027d2:	d107      	bne.n	80027e4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2228      	movs	r2, #40	@ 0x28
 80027de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80027e2:	e015      	b.n	8002810 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80027f2:	d00a      	beq.n	800280a <I2C_ITError+0x7a>
 80027f4:	7bfb      	ldrb	r3, [r7, #15]
 80027f6:	2b60      	cmp	r3, #96	@ 0x60
 80027f8:	d007      	beq.n	800280a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2220      	movs	r2, #32
 80027fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800281a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800281e:	d162      	bne.n	80028e6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800282e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002834:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b01      	cmp	r3, #1
 800283c:	d020      	beq.n	8002880 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002842:	4a6a      	ldr	r2, [pc, #424]	@ (80029ec <I2C_ITError+0x25c>)
 8002844:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800284a:	4618      	mov	r0, r3
 800284c:	f7fe f89a 	bl	8000984 <HAL_DMA_Abort_IT>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	f000 8089 	beq.w	800296a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0201 	bic.w	r2, r2, #1
 8002866:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2220      	movs	r2, #32
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800287a:	4610      	mov	r0, r2
 800287c:	4798      	blx	r3
 800287e:	e074      	b.n	800296a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002884:	4a59      	ldr	r2, [pc, #356]	@ (80029ec <I2C_ITError+0x25c>)
 8002886:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800288c:	4618      	mov	r0, r3
 800288e:	f7fe f879 	bl	8000984 <HAL_DMA_Abort_IT>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d068      	beq.n	800296a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028a2:	2b40      	cmp	r3, #64	@ 0x40
 80028a4:	d10b      	bne.n	80028be <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	691a      	ldr	r2, [r3, #16]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b0:	b2d2      	uxtb	r2, r2
 80028b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b8:	1c5a      	adds	r2, r3, #1
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f022 0201 	bic.w	r2, r2, #1
 80028cc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2220      	movs	r2, #32
 80028d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80028e0:	4610      	mov	r0, r2
 80028e2:	4798      	blx	r3
 80028e4:	e041      	b.n	800296a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b60      	cmp	r3, #96	@ 0x60
 80028f0:	d125      	bne.n	800293e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2220      	movs	r2, #32
 80028f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800290a:	2b40      	cmp	r3, #64	@ 0x40
 800290c:	d10b      	bne.n	8002926 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	691a      	ldr	r2, [r3, #16]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002918:	b2d2      	uxtb	r2, r2
 800291a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002920:	1c5a      	adds	r2, r3, #1
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 0201 	bic.w	r2, r2, #1
 8002934:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7fe fed5 	bl	80016e6 <HAL_I2C_AbortCpltCallback>
 800293c:	e015      	b.n	800296a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002948:	2b40      	cmp	r3, #64	@ 0x40
 800294a:	d10b      	bne.n	8002964 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	691a      	ldr	r2, [r3, #16]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295e:	1c5a      	adds	r2, r3, #1
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f7fd fc81 	bl	800026c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10e      	bne.n	8002998 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002980:	2b00      	cmp	r3, #0
 8002982:	d109      	bne.n	8002998 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800298a:	2b00      	cmp	r3, #0
 800298c:	d104      	bne.n	8002998 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002994:	2b00      	cmp	r3, #0
 8002996:	d007      	beq.n	80029a8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	685a      	ldr	r2, [r3, #4]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80029a6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029ae:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	2b04      	cmp	r3, #4
 80029ba:	d113      	bne.n	80029e4 <I2C_ITError+0x254>
 80029bc:	7bfb      	ldrb	r3, [r7, #15]
 80029be:	2b28      	cmp	r3, #40	@ 0x28
 80029c0:	d110      	bne.n	80029e4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a0a      	ldr	r2, [pc, #40]	@ (80029f0 <I2C_ITError+0x260>)
 80029c6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2220      	movs	r2, #32
 80029d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f7fd fbb4 	bl	800014c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80029e4:	bf00      	nop
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	080029f5 	.word	0x080029f5
 80029f0:	ffff0000 	.word	0xffff0000

080029f4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a04:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a0c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002a0e:	4b4b      	ldr	r3, [pc, #300]	@ (8002b3c <I2C_DMAAbort+0x148>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	08db      	lsrs	r3, r3, #3
 8002a14:	4a4a      	ldr	r2, [pc, #296]	@ (8002b40 <I2C_DMAAbort+0x14c>)
 8002a16:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1a:	0a1a      	lsrs	r2, r3, #8
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	00da      	lsls	r2, r3, #3
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d106      	bne.n	8002a3c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a32:	f043 0220 	orr.w	r2, r3, #32
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8002a3a:	e00a      	b.n	8002a52 <I2C_DMAAbort+0x5e>
    }
    count--;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a50:	d0ea      	beq.n	8002a28 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a5e:	2200      	movs	r2, #0
 8002a60:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a6e:	2200      	movs	r2, #0
 8002a70:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a80:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	2200      	movs	r2, #0
 8002a86:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a94:	2200      	movs	r2, #0
 8002a96:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d003      	beq.n	8002aa8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f022 0201 	bic.w	r2, r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b60      	cmp	r3, #96	@ 0x60
 8002ac2:	d10e      	bne.n	8002ae2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002ada:	6978      	ldr	r0, [r7, #20]
 8002adc:	f7fe fe03 	bl	80016e6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002ae0:	e027      	b.n	8002b32 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ae2:	7cfb      	ldrb	r3, [r7, #19]
 8002ae4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002ae8:	2b28      	cmp	r3, #40	@ 0x28
 8002aea:	d117      	bne.n	8002b1c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f042 0201 	orr.w	r2, r2, #1
 8002afa:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b0a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	2228      	movs	r2, #40	@ 0x28
 8002b16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002b1a:	e007      	b.n	8002b2c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002b2c:	6978      	ldr	r0, [r7, #20]
 8002b2e:	f7fd fb9d 	bl	800026c <HAL_I2C_ErrorCallback>
}
 8002b32:	bf00      	nop
 8002b34:	3718      	adds	r7, #24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	20000010 	.word	0x20000010
 8002b40:	14f8b589 	.word	0x14f8b589

08002b44 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8002b50:	4b13      	ldr	r3, [pc, #76]	@ (8002ba0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	08db      	lsrs	r3, r3, #3
 8002b56:	4a13      	ldr	r2, [pc, #76]	@ (8002ba4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8002b58:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5c:	0a1a      	lsrs	r2, r3, #8
 8002b5e:	4613      	mov	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4413      	add	r3, r2
 8002b64:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d107      	bne.n	8002b82 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b76:	f043 0220 	orr.w	r2, r3, #32
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e008      	b.n	8002b94 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b90:	d0e9      	beq.n	8002b66 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3714      	adds	r7, #20
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bc80      	pop	{r7}
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	20000010 	.word	0x20000010
 8002ba4:	14f8b589 	.word	0x14f8b589

08002ba8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002bb8:	d103      	bne.n	8002bc2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8002bc0:	e007      	b.n	8002bd2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc6:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002bca:	d102      	bne.n	8002bd2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2208      	movs	r2, #8
 8002bd0:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bc80      	pop	{r7}
 8002bda:	4770      	bx	lr

08002bdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e272      	b.n	80030d4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 8087 	beq.w	8002d0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bfc:	4b92      	ldr	r3, [pc, #584]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f003 030c 	and.w	r3, r3, #12
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d00c      	beq.n	8002c22 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c08:	4b8f      	ldr	r3, [pc, #572]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f003 030c 	and.w	r3, r3, #12
 8002c10:	2b08      	cmp	r3, #8
 8002c12:	d112      	bne.n	8002c3a <HAL_RCC_OscConfig+0x5e>
 8002c14:	4b8c      	ldr	r3, [pc, #560]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c20:	d10b      	bne.n	8002c3a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c22:	4b89      	ldr	r3, [pc, #548]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d06c      	beq.n	8002d08 <HAL_RCC_OscConfig+0x12c>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d168      	bne.n	8002d08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e24c      	b.n	80030d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c42:	d106      	bne.n	8002c52 <HAL_RCC_OscConfig+0x76>
 8002c44:	4b80      	ldr	r3, [pc, #512]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a7f      	ldr	r2, [pc, #508]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002c4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c4e:	6013      	str	r3, [r2, #0]
 8002c50:	e02e      	b.n	8002cb0 <HAL_RCC_OscConfig+0xd4>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10c      	bne.n	8002c74 <HAL_RCC_OscConfig+0x98>
 8002c5a:	4b7b      	ldr	r3, [pc, #492]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a7a      	ldr	r2, [pc, #488]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002c60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	4b78      	ldr	r3, [pc, #480]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a77      	ldr	r2, [pc, #476]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002c6c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	e01d      	b.n	8002cb0 <HAL_RCC_OscConfig+0xd4>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c7c:	d10c      	bne.n	8002c98 <HAL_RCC_OscConfig+0xbc>
 8002c7e:	4b72      	ldr	r3, [pc, #456]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a71      	ldr	r2, [pc, #452]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002c84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	4b6f      	ldr	r3, [pc, #444]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a6e      	ldr	r2, [pc, #440]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002c90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c94:	6013      	str	r3, [r2, #0]
 8002c96:	e00b      	b.n	8002cb0 <HAL_RCC_OscConfig+0xd4>
 8002c98:	4b6b      	ldr	r3, [pc, #428]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a6a      	ldr	r2, [pc, #424]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002c9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ca2:	6013      	str	r3, [r2, #0]
 8002ca4:	4b68      	ldr	r3, [pc, #416]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a67      	ldr	r2, [pc, #412]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002caa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d013      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb8:	f7fd fd4c 	bl	8000754 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc0:	f7fd fd48 	bl	8000754 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b64      	cmp	r3, #100	@ 0x64
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e200      	b.n	80030d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd2:	4b5d      	ldr	r3, [pc, #372]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0f0      	beq.n	8002cc0 <HAL_RCC_OscConfig+0xe4>
 8002cde:	e014      	b.n	8002d0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce0:	f7fd fd38 	bl	8000754 <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ce8:	f7fd fd34 	bl	8000754 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b64      	cmp	r3, #100	@ 0x64
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e1ec      	b.n	80030d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cfa:	4b53      	ldr	r3, [pc, #332]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1f0      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x10c>
 8002d06:	e000      	b.n	8002d0a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d063      	beq.n	8002dde <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d16:	4b4c      	ldr	r3, [pc, #304]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f003 030c 	and.w	r3, r3, #12
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00b      	beq.n	8002d3a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d22:	4b49      	ldr	r3, [pc, #292]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f003 030c 	and.w	r3, r3, #12
 8002d2a:	2b08      	cmp	r3, #8
 8002d2c:	d11c      	bne.n	8002d68 <HAL_RCC_OscConfig+0x18c>
 8002d2e:	4b46      	ldr	r3, [pc, #280]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d116      	bne.n	8002d68 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d3a:	4b43      	ldr	r3, [pc, #268]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d005      	beq.n	8002d52 <HAL_RCC_OscConfig+0x176>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d001      	beq.n	8002d52 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e1c0      	b.n	80030d4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d52:	4b3d      	ldr	r3, [pc, #244]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	4939      	ldr	r1, [pc, #228]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d66:	e03a      	b.n	8002dde <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d020      	beq.n	8002db2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d70:	4b36      	ldr	r3, [pc, #216]	@ (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002d72:	2201      	movs	r2, #1
 8002d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d76:	f7fd fced 	bl	8000754 <HAL_GetTick>
 8002d7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d7c:	e008      	b.n	8002d90 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d7e:	f7fd fce9 	bl	8000754 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e1a1      	b.n	80030d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d90:	4b2d      	ldr	r3, [pc, #180]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d0f0      	beq.n	8002d7e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d9c:	4b2a      	ldr	r3, [pc, #168]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	4927      	ldr	r1, [pc, #156]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	600b      	str	r3, [r1, #0]
 8002db0:	e015      	b.n	8002dde <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002db2:	4b26      	ldr	r3, [pc, #152]	@ (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db8:	f7fd fccc 	bl	8000754 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dc0:	f7fd fcc8 	bl	8000754 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e180      	b.n	80030d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dd2:	4b1d      	ldr	r3, [pc, #116]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1f0      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0308 	and.w	r3, r3, #8
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d03a      	beq.n	8002e60 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d019      	beq.n	8002e26 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002df2:	4b17      	ldr	r3, [pc, #92]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002df4:	2201      	movs	r2, #1
 8002df6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002df8:	f7fd fcac 	bl	8000754 <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dfe:	e008      	b.n	8002e12 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e00:	f7fd fca8 	bl	8000754 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e160      	b.n	80030d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e12:	4b0d      	ldr	r3, [pc, #52]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d0f0      	beq.n	8002e00 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e1e:	2001      	movs	r0, #1
 8002e20:	f000 faba 	bl	8003398 <RCC_Delay>
 8002e24:	e01c      	b.n	8002e60 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e26:	4b0a      	ldr	r3, [pc, #40]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e2c:	f7fd fc92 	bl	8000754 <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e32:	e00f      	b.n	8002e54 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e34:	f7fd fc8e 	bl	8000754 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d908      	bls.n	8002e54 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e146      	b.n	80030d4 <HAL_RCC_OscConfig+0x4f8>
 8002e46:	bf00      	nop
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	42420000 	.word	0x42420000
 8002e50:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e54:	4b92      	ldr	r3, [pc, #584]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1e9      	bne.n	8002e34 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0304 	and.w	r3, r3, #4
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 80a6 	beq.w	8002fba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e72:	4b8b      	ldr	r3, [pc, #556]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10d      	bne.n	8002e9a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e7e:	4b88      	ldr	r3, [pc, #544]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	4a87      	ldr	r2, [pc, #540]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002e84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e88:	61d3      	str	r3, [r2, #28]
 8002e8a:	4b85      	ldr	r3, [pc, #532]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e92:	60bb      	str	r3, [r7, #8]
 8002e94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e96:	2301      	movs	r3, #1
 8002e98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e9a:	4b82      	ldr	r3, [pc, #520]	@ (80030a4 <HAL_RCC_OscConfig+0x4c8>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d118      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ea6:	4b7f      	ldr	r3, [pc, #508]	@ (80030a4 <HAL_RCC_OscConfig+0x4c8>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a7e      	ldr	r2, [pc, #504]	@ (80030a4 <HAL_RCC_OscConfig+0x4c8>)
 8002eac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002eb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eb2:	f7fd fc4f 	bl	8000754 <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb8:	e008      	b.n	8002ecc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eba:	f7fd fc4b 	bl	8000754 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b64      	cmp	r3, #100	@ 0x64
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e103      	b.n	80030d4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ecc:	4b75      	ldr	r3, [pc, #468]	@ (80030a4 <HAL_RCC_OscConfig+0x4c8>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d0f0      	beq.n	8002eba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d106      	bne.n	8002eee <HAL_RCC_OscConfig+0x312>
 8002ee0:	4b6f      	ldr	r3, [pc, #444]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	4a6e      	ldr	r2, [pc, #440]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002ee6:	f043 0301 	orr.w	r3, r3, #1
 8002eea:	6213      	str	r3, [r2, #32]
 8002eec:	e02d      	b.n	8002f4a <HAL_RCC_OscConfig+0x36e>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10c      	bne.n	8002f10 <HAL_RCC_OscConfig+0x334>
 8002ef6:	4b6a      	ldr	r3, [pc, #424]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	4a69      	ldr	r2, [pc, #420]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002efc:	f023 0301 	bic.w	r3, r3, #1
 8002f00:	6213      	str	r3, [r2, #32]
 8002f02:	4b67      	ldr	r3, [pc, #412]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	4a66      	ldr	r2, [pc, #408]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f08:	f023 0304 	bic.w	r3, r3, #4
 8002f0c:	6213      	str	r3, [r2, #32]
 8002f0e:	e01c      	b.n	8002f4a <HAL_RCC_OscConfig+0x36e>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	2b05      	cmp	r3, #5
 8002f16:	d10c      	bne.n	8002f32 <HAL_RCC_OscConfig+0x356>
 8002f18:	4b61      	ldr	r3, [pc, #388]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	4a60      	ldr	r2, [pc, #384]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f1e:	f043 0304 	orr.w	r3, r3, #4
 8002f22:	6213      	str	r3, [r2, #32]
 8002f24:	4b5e      	ldr	r3, [pc, #376]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	4a5d      	ldr	r2, [pc, #372]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f2a:	f043 0301 	orr.w	r3, r3, #1
 8002f2e:	6213      	str	r3, [r2, #32]
 8002f30:	e00b      	b.n	8002f4a <HAL_RCC_OscConfig+0x36e>
 8002f32:	4b5b      	ldr	r3, [pc, #364]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	4a5a      	ldr	r2, [pc, #360]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f38:	f023 0301 	bic.w	r3, r3, #1
 8002f3c:	6213      	str	r3, [r2, #32]
 8002f3e:	4b58      	ldr	r3, [pc, #352]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	4a57      	ldr	r2, [pc, #348]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f44:	f023 0304 	bic.w	r3, r3, #4
 8002f48:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d015      	beq.n	8002f7e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f52:	f7fd fbff 	bl	8000754 <HAL_GetTick>
 8002f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f58:	e00a      	b.n	8002f70 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f5a:	f7fd fbfb 	bl	8000754 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e0b1      	b.n	80030d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f70:	4b4b      	ldr	r3, [pc, #300]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0ee      	beq.n	8002f5a <HAL_RCC_OscConfig+0x37e>
 8002f7c:	e014      	b.n	8002fa8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f7e:	f7fd fbe9 	bl	8000754 <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f84:	e00a      	b.n	8002f9c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f86:	f7fd fbe5 	bl	8000754 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e09b      	b.n	80030d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f9c:	4b40      	ldr	r3, [pc, #256]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1ee      	bne.n	8002f86 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fa8:	7dfb      	ldrb	r3, [r7, #23]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d105      	bne.n	8002fba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fae:	4b3c      	ldr	r3, [pc, #240]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	4a3b      	ldr	r2, [pc, #236]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002fb4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fb8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f000 8087 	beq.w	80030d2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fc4:	4b36      	ldr	r3, [pc, #216]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f003 030c 	and.w	r3, r3, #12
 8002fcc:	2b08      	cmp	r3, #8
 8002fce:	d061      	beq.n	8003094 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	69db      	ldr	r3, [r3, #28]
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d146      	bne.n	8003066 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fd8:	4b33      	ldr	r3, [pc, #204]	@ (80030a8 <HAL_RCC_OscConfig+0x4cc>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fde:	f7fd fbb9 	bl	8000754 <HAL_GetTick>
 8002fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fe4:	e008      	b.n	8002ff8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe6:	f7fd fbb5 	bl	8000754 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d901      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e06d      	b.n	80030d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ff8:	4b29      	ldr	r3, [pc, #164]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1f0      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800300c:	d108      	bne.n	8003020 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800300e:	4b24      	ldr	r3, [pc, #144]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	4921      	ldr	r1, [pc, #132]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 800301c:	4313      	orrs	r3, r2
 800301e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003020:	4b1f      	ldr	r3, [pc, #124]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a19      	ldr	r1, [r3, #32]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003030:	430b      	orrs	r3, r1
 8003032:	491b      	ldr	r1, [pc, #108]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8003034:	4313      	orrs	r3, r2
 8003036:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003038:	4b1b      	ldr	r3, [pc, #108]	@ (80030a8 <HAL_RCC_OscConfig+0x4cc>)
 800303a:	2201      	movs	r2, #1
 800303c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303e:	f7fd fb89 	bl	8000754 <HAL_GetTick>
 8003042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003044:	e008      	b.n	8003058 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003046:	f7fd fb85 	bl	8000754 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e03d      	b.n	80030d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003058:	4b11      	ldr	r3, [pc, #68]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d0f0      	beq.n	8003046 <HAL_RCC_OscConfig+0x46a>
 8003064:	e035      	b.n	80030d2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003066:	4b10      	ldr	r3, [pc, #64]	@ (80030a8 <HAL_RCC_OscConfig+0x4cc>)
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306c:	f7fd fb72 	bl	8000754 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003074:	f7fd fb6e 	bl	8000754 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e026      	b.n	80030d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003086:	4b06      	ldr	r3, [pc, #24]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f0      	bne.n	8003074 <HAL_RCC_OscConfig+0x498>
 8003092:	e01e      	b.n	80030d2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	69db      	ldr	r3, [r3, #28]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d107      	bne.n	80030ac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e019      	b.n	80030d4 <HAL_RCC_OscConfig+0x4f8>
 80030a0:	40021000 	.word	0x40021000
 80030a4:	40007000 	.word	0x40007000
 80030a8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030ac:	4b0b      	ldr	r3, [pc, #44]	@ (80030dc <HAL_RCC_OscConfig+0x500>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d106      	bne.n	80030ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d001      	beq.n	80030d2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e000      	b.n	80030d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3718      	adds	r7, #24
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40021000 	.word	0x40021000

080030e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e0d0      	b.n	8003296 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030f4:	4b6a      	ldr	r3, [pc, #424]	@ (80032a0 <HAL_RCC_ClockConfig+0x1c0>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d910      	bls.n	8003124 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003102:	4b67      	ldr	r3, [pc, #412]	@ (80032a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f023 0207 	bic.w	r2, r3, #7
 800310a:	4965      	ldr	r1, [pc, #404]	@ (80032a0 <HAL_RCC_ClockConfig+0x1c0>)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	4313      	orrs	r3, r2
 8003110:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003112:	4b63      	ldr	r3, [pc, #396]	@ (80032a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	429a      	cmp	r2, r3
 800311e:	d001      	beq.n	8003124 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e0b8      	b.n	8003296 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d020      	beq.n	8003172 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	2b00      	cmp	r3, #0
 800313a:	d005      	beq.n	8003148 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800313c:	4b59      	ldr	r3, [pc, #356]	@ (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	4a58      	ldr	r2, [pc, #352]	@ (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003142:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003146:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0308 	and.w	r3, r3, #8
 8003150:	2b00      	cmp	r3, #0
 8003152:	d005      	beq.n	8003160 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003154:	4b53      	ldr	r3, [pc, #332]	@ (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	4a52      	ldr	r2, [pc, #328]	@ (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 800315a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800315e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003160:	4b50      	ldr	r3, [pc, #320]	@ (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	494d      	ldr	r1, [pc, #308]	@ (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 800316e:	4313      	orrs	r3, r2
 8003170:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b00      	cmp	r3, #0
 800317c:	d040      	beq.n	8003200 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d107      	bne.n	8003196 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003186:	4b47      	ldr	r3, [pc, #284]	@ (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d115      	bne.n	80031be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e07f      	b.n	8003296 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	2b02      	cmp	r3, #2
 800319c:	d107      	bne.n	80031ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800319e:	4b41      	ldr	r3, [pc, #260]	@ (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d109      	bne.n	80031be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e073      	b.n	8003296 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ae:	4b3d      	ldr	r3, [pc, #244]	@ (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e06b      	b.n	8003296 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031be:	4b39      	ldr	r3, [pc, #228]	@ (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f023 0203 	bic.w	r2, r3, #3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	4936      	ldr	r1, [pc, #216]	@ (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031d0:	f7fd fac0 	bl	8000754 <HAL_GetTick>
 80031d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031d6:	e00a      	b.n	80031ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031d8:	f7fd fabc 	bl	8000754 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e053      	b.n	8003296 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ee:	4b2d      	ldr	r3, [pc, #180]	@ (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f003 020c 	and.w	r2, r3, #12
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d1eb      	bne.n	80031d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003200:	4b27      	ldr	r3, [pc, #156]	@ (80032a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0307 	and.w	r3, r3, #7
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	429a      	cmp	r2, r3
 800320c:	d210      	bcs.n	8003230 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800320e:	4b24      	ldr	r3, [pc, #144]	@ (80032a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f023 0207 	bic.w	r2, r3, #7
 8003216:	4922      	ldr	r1, [pc, #136]	@ (80032a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	4313      	orrs	r3, r2
 800321c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800321e:	4b20      	ldr	r3, [pc, #128]	@ (80032a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0307 	and.w	r3, r3, #7
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	429a      	cmp	r2, r3
 800322a:	d001      	beq.n	8003230 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e032      	b.n	8003296 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	2b00      	cmp	r3, #0
 800323a:	d008      	beq.n	800324e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800323c:	4b19      	ldr	r3, [pc, #100]	@ (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	4916      	ldr	r1, [pc, #88]	@ (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 800324a:	4313      	orrs	r3, r2
 800324c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0308 	and.w	r3, r3, #8
 8003256:	2b00      	cmp	r3, #0
 8003258:	d009      	beq.n	800326e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800325a:	4b12      	ldr	r3, [pc, #72]	@ (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	490e      	ldr	r1, [pc, #56]	@ (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 800326a:	4313      	orrs	r3, r2
 800326c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800326e:	f000 f821 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 8003272:	4602      	mov	r2, r0
 8003274:	4b0b      	ldr	r3, [pc, #44]	@ (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	091b      	lsrs	r3, r3, #4
 800327a:	f003 030f 	and.w	r3, r3, #15
 800327e:	490a      	ldr	r1, [pc, #40]	@ (80032a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003280:	5ccb      	ldrb	r3, [r1, r3]
 8003282:	fa22 f303 	lsr.w	r3, r2, r3
 8003286:	4a09      	ldr	r2, [pc, #36]	@ (80032ac <HAL_RCC_ClockConfig+0x1cc>)
 8003288:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800328a:	4b09      	ldr	r3, [pc, #36]	@ (80032b0 <HAL_RCC_ClockConfig+0x1d0>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f7fd fa1e 	bl	80006d0 <HAL_InitTick>

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	40022000 	.word	0x40022000
 80032a4:	40021000 	.word	0x40021000
 80032a8:	08003444 	.word	0x08003444
 80032ac:	20000010 	.word	0x20000010
 80032b0:	20000014 	.word	0x20000014

080032b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b087      	sub	sp, #28
 80032b8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032ba:	2300      	movs	r3, #0
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	2300      	movs	r3, #0
 80032c0:	60bb      	str	r3, [r7, #8]
 80032c2:	2300      	movs	r3, #0
 80032c4:	617b      	str	r3, [r7, #20]
 80032c6:	2300      	movs	r3, #0
 80032c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80032ca:	2300      	movs	r3, #0
 80032cc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032ce:	4b1e      	ldr	r3, [pc, #120]	@ (8003348 <HAL_RCC_GetSysClockFreq+0x94>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f003 030c 	and.w	r3, r3, #12
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d002      	beq.n	80032e4 <HAL_RCC_GetSysClockFreq+0x30>
 80032de:	2b08      	cmp	r3, #8
 80032e0:	d003      	beq.n	80032ea <HAL_RCC_GetSysClockFreq+0x36>
 80032e2:	e027      	b.n	8003334 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032e4:	4b19      	ldr	r3, [pc, #100]	@ (800334c <HAL_RCC_GetSysClockFreq+0x98>)
 80032e6:	613b      	str	r3, [r7, #16]
      break;
 80032e8:	e027      	b.n	800333a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	0c9b      	lsrs	r3, r3, #18
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	4a17      	ldr	r2, [pc, #92]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x9c>)
 80032f4:	5cd3      	ldrb	r3, [r2, r3]
 80032f6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d010      	beq.n	8003324 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003302:	4b11      	ldr	r3, [pc, #68]	@ (8003348 <HAL_RCC_GetSysClockFreq+0x94>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	0c5b      	lsrs	r3, r3, #17
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	4a11      	ldr	r2, [pc, #68]	@ (8003354 <HAL_RCC_GetSysClockFreq+0xa0>)
 800330e:	5cd3      	ldrb	r3, [r2, r3]
 8003310:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a0d      	ldr	r2, [pc, #52]	@ (800334c <HAL_RCC_GetSysClockFreq+0x98>)
 8003316:	fb03 f202 	mul.w	r2, r3, r2
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003320:	617b      	str	r3, [r7, #20]
 8003322:	e004      	b.n	800332e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a0c      	ldr	r2, [pc, #48]	@ (8003358 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003328:	fb02 f303 	mul.w	r3, r2, r3
 800332c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	613b      	str	r3, [r7, #16]
      break;
 8003332:	e002      	b.n	800333a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003334:	4b05      	ldr	r3, [pc, #20]	@ (800334c <HAL_RCC_GetSysClockFreq+0x98>)
 8003336:	613b      	str	r3, [r7, #16]
      break;
 8003338:	bf00      	nop
    }
  }
  return sysclockfreq;
 800333a:	693b      	ldr	r3, [r7, #16]
}
 800333c:	4618      	mov	r0, r3
 800333e:	371c      	adds	r7, #28
 8003340:	46bd      	mov	sp, r7
 8003342:	bc80      	pop	{r7}
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	40021000 	.word	0x40021000
 800334c:	007a1200 	.word	0x007a1200
 8003350:	0800345c 	.word	0x0800345c
 8003354:	0800346c 	.word	0x0800346c
 8003358:	003d0900 	.word	0x003d0900

0800335c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003360:	4b02      	ldr	r3, [pc, #8]	@ (800336c <HAL_RCC_GetHCLKFreq+0x10>)
 8003362:	681b      	ldr	r3, [r3, #0]
}
 8003364:	4618      	mov	r0, r3
 8003366:	46bd      	mov	sp, r7
 8003368:	bc80      	pop	{r7}
 800336a:	4770      	bx	lr
 800336c:	20000010 	.word	0x20000010

08003370 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003374:	f7ff fff2 	bl	800335c <HAL_RCC_GetHCLKFreq>
 8003378:	4602      	mov	r2, r0
 800337a:	4b05      	ldr	r3, [pc, #20]	@ (8003390 <HAL_RCC_GetPCLK1Freq+0x20>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	0a1b      	lsrs	r3, r3, #8
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	4903      	ldr	r1, [pc, #12]	@ (8003394 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003386:	5ccb      	ldrb	r3, [r1, r3]
 8003388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800338c:	4618      	mov	r0, r3
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40021000 	.word	0x40021000
 8003394:	08003454 	.word	0x08003454

08003398 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033a0:	4b0a      	ldr	r3, [pc, #40]	@ (80033cc <RCC_Delay+0x34>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a0a      	ldr	r2, [pc, #40]	@ (80033d0 <RCC_Delay+0x38>)
 80033a6:	fba2 2303 	umull	r2, r3, r2, r3
 80033aa:	0a5b      	lsrs	r3, r3, #9
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	fb02 f303 	mul.w	r3, r2, r3
 80033b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033b4:	bf00      	nop
  }
  while (Delay --);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	1e5a      	subs	r2, r3, #1
 80033ba:	60fa      	str	r2, [r7, #12]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1f9      	bne.n	80033b4 <RCC_Delay+0x1c>
}
 80033c0:	bf00      	nop
 80033c2:	bf00      	nop
 80033c4:	3714      	adds	r7, #20
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bc80      	pop	{r7}
 80033ca:	4770      	bx	lr
 80033cc:	20000010 	.word	0x20000010
 80033d0:	10624dd3 	.word	0x10624dd3

080033d4 <memset>:
 80033d4:	4603      	mov	r3, r0
 80033d6:	4402      	add	r2, r0
 80033d8:	4293      	cmp	r3, r2
 80033da:	d100      	bne.n	80033de <memset+0xa>
 80033dc:	4770      	bx	lr
 80033de:	f803 1b01 	strb.w	r1, [r3], #1
 80033e2:	e7f9      	b.n	80033d8 <memset+0x4>

080033e4 <__libc_init_array>:
 80033e4:	b570      	push	{r4, r5, r6, lr}
 80033e6:	2600      	movs	r6, #0
 80033e8:	4d0c      	ldr	r5, [pc, #48]	@ (800341c <__libc_init_array+0x38>)
 80033ea:	4c0d      	ldr	r4, [pc, #52]	@ (8003420 <__libc_init_array+0x3c>)
 80033ec:	1b64      	subs	r4, r4, r5
 80033ee:	10a4      	asrs	r4, r4, #2
 80033f0:	42a6      	cmp	r6, r4
 80033f2:	d109      	bne.n	8003408 <__libc_init_array+0x24>
 80033f4:	f000 f81a 	bl	800342c <_init>
 80033f8:	2600      	movs	r6, #0
 80033fa:	4d0a      	ldr	r5, [pc, #40]	@ (8003424 <__libc_init_array+0x40>)
 80033fc:	4c0a      	ldr	r4, [pc, #40]	@ (8003428 <__libc_init_array+0x44>)
 80033fe:	1b64      	subs	r4, r4, r5
 8003400:	10a4      	asrs	r4, r4, #2
 8003402:	42a6      	cmp	r6, r4
 8003404:	d105      	bne.n	8003412 <__libc_init_array+0x2e>
 8003406:	bd70      	pop	{r4, r5, r6, pc}
 8003408:	f855 3b04 	ldr.w	r3, [r5], #4
 800340c:	4798      	blx	r3
 800340e:	3601      	adds	r6, #1
 8003410:	e7ee      	b.n	80033f0 <__libc_init_array+0xc>
 8003412:	f855 3b04 	ldr.w	r3, [r5], #4
 8003416:	4798      	blx	r3
 8003418:	3601      	adds	r6, #1
 800341a:	e7f2      	b.n	8003402 <__libc_init_array+0x1e>
 800341c:	08003470 	.word	0x08003470
 8003420:	08003470 	.word	0x08003470
 8003424:	08003470 	.word	0x08003470
 8003428:	08003474 	.word	0x08003474

0800342c <_init>:
 800342c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800342e:	bf00      	nop
 8003430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003432:	bc08      	pop	{r3}
 8003434:	469e      	mov	lr, r3
 8003436:	4770      	bx	lr

08003438 <_fini>:
 8003438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800343a:	bf00      	nop
 800343c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800343e:	bc08      	pop	{r3}
 8003440:	469e      	mov	lr, r3
 8003442:	4770      	bx	lr
